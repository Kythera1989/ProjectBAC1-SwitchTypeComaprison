
ProjectBAC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001118  000011ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800122  00800122  000011ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001633  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  0000296f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  000036ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000042a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  000045d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9c  00000000  00000000  00004e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_1>
       8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_2>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_18>
      4c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 e1       	ldi	r30, 0x18	; 24
      c8:	f1 e1       	ldi	r31, 0x11	; 17
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 32       	cpi	r26, 0x22	; 34
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a2 e2       	ldi	r26, 0x22	; 34
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ab 33       	cpi	r26, 0x3B	; 59
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
      ea:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <usartStringWrite>:
#include <string.h>
#include <util/atomic.h>
#include <util/delay.h>

uint8_t usartStringWrite(const char* str)
{
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	7c 01       	movw	r14, r24
    uint8_t i = 0;
     100:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t cnt = 0;
    while (str[i] != '\0') { //get the length of the string until \0
     102:	01 c0       	rjmp	.+2      	; 0x106 <usartStringWrite+0x14>
        i++;
     104:	cf 5f       	subi	r28, 0xFF	; 255

uint8_t usartStringWrite(const char* str)
{
    uint8_t i = 0;
    uint8_t cnt = 0;
    while (str[i] != '\0') { //get the length of the string until \0
     106:	f7 01       	movw	r30, r14
     108:	ec 0f       	add	r30, r28
     10a:	f1 1d       	adc	r31, r1
     10c:	80 81       	ld	r24, Z
     10e:	81 11       	cpse	r24, r1
     110:	f9 cf       	rjmp	.-14     	; 0x104 <usartStringWrite+0x12>
        i++;
    }
    if (usartAvailableForWrite() >= i) { //check if buffer size is big enough
     112:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     116:	8c 17       	cp	r24, r28
     118:	68 f4       	brcc	.+26     	; 0x134 <usartStringWrite+0x42>
#include <util/delay.h>

uint8_t usartStringWrite(const char* str)
{
    uint8_t i = 0;
    uint8_t cnt = 0;
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	13 c0       	rjmp	.+38     	; 0x144 <usartStringWrite+0x52>
    while (str[i] != '\0') { //get the length of the string until \0
        i++;
    }
    if (usartAvailableForWrite() >= i) { //check if buffer size is big enough
        for (int k = 0; k < i; k++) {
            if (usartWrite(str[k]) == true) {
     11e:	f7 01       	movw	r30, r14
     120:	e0 0f       	add	r30, r16
     122:	f1 1f       	adc	r31, r17
     124:	80 81       	ld	r24, Z
     126:	0e 94 66 02 	call	0x4cc	; 0x4cc <usartWrite>
     12a:	81 11       	cpse	r24, r1
                cnt++;
     12c:	df 5f       	subi	r29, 0xFF	; 255
    uint8_t cnt = 0;
    while (str[i] != '\0') { //get the length of the string until \0
        i++;
    }
    if (usartAvailableForWrite() >= i) { //check if buffer size is big enough
        for (int k = 0; k < i; k++) {
     12e:	0f 5f       	subi	r16, 0xFF	; 255
     130:	1f 4f       	sbci	r17, 0xFF	; 255
     132:	03 c0       	rjmp	.+6      	; 0x13a <usartStringWrite+0x48>
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	d0 e0       	ldi	r29, 0x00	; 0
     13a:	8c 2f       	mov	r24, r28
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	08 17       	cp	r16, r24
     140:	19 07       	cpc	r17, r25
     142:	6c f3       	brlt	.-38     	; 0x11e <usartStringWrite+0x2c>
            if (usartWrite(str[k]) == true) {
                cnt++;
            }
        }
    }
    usartFlush(); //make sure all buffered data has been written to the interface
     144:	0e 94 a9 02 	call	0x552	; 0x552 <usartFlush>
    return cnt;
}
     148:	8d 2f       	mov	r24, r29
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	ff 90       	pop	r15
     154:	ef 90       	pop	r14
     156:	08 95       	ret

00000158 <usartStringPrint>:
uint8_t usartStringPrint(const char* format, ...)
{ //tutorial on youtube:https://www.youtube.com/watch?v=S-ak715zIIE
     158:	af 92       	push	r10
     15a:	bf 92       	push	r11
     15c:	cf 92       	push	r12
     15e:	df 92       	push	r13
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	8e 01       	movw	r16, r28
     172:	03 5f       	subi	r16, 0xF3	; 243
     174:	1f 4f       	sbci	r17, 0xFF	; 255
     176:	f8 01       	movw	r30, r16
     178:	a1 90       	ld	r10, Z+
     17a:	b1 90       	ld	r11, Z+
     17c:	8f 01       	movw	r16, r30
    } else {
        return 0;
    }
    usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
     17e:	cd b6       	in	r12, 0x3d	; 61
     180:	de b6       	in	r13, 0x3e	; 62
uint8_t usartStringPrint(const char* format, ...)
{ //tutorial on youtube:https://www.youtube.com/watch?v=S-ak715zIIE

    uint8_t cnt = 0;
    va_list args;
    char buffer[usartAvailableForWrite()]; //make a buffer for the string from va_list
     182:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     186:	2d b7       	in	r18, 0x3d	; 61
     188:	3e b7       	in	r19, 0x3e	; 62
     18a:	28 1b       	sub	r18, r24
     18c:	31 09       	sbc	r19, r1
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	3e bf       	out	0x3e, r19	; 62
     194:	0f be       	out	0x3f, r0	; 63
     196:	2d bf       	out	0x3d, r18	; 61
     198:	8d b7       	in	r24, 0x3d	; 61
     19a:	9e b7       	in	r25, 0x3e	; 62
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	7c 01       	movw	r14, r24
    va_start(args, format);
    cnt = vsnprintf(buffer, usartAvailableForWrite(), format, args); //got this from https://www.educative.io/answers/what-is-vsnprintf-in-c
     1a0:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     1a4:	68 2f       	mov	r22, r24
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	98 01       	movw	r18, r16
     1aa:	a5 01       	movw	r20, r10
     1ac:	c7 01       	movw	r24, r14
     1ae:	0e 94 96 05 	call	0xb2c	; 0xb2c <vsnprintf>
     1b2:	18 2f       	mov	r17, r24
    va_end(args);

    if (cnt <= usartAvailableForWrite()) { //check if ringbuffer size is big enough for the string
     1b4:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     1b8:	81 17       	cp	r24, r17
     1ba:	38 f0       	brcs	.+14     	; 0x1ca <usartStringPrint+0x72>
        usartStringWrite(buffer);
     1bc:	c7 01       	movw	r24, r14
     1be:	0e 94 79 00 	call	0xf2	; 0xf2 <usartStringWrite>
    } else {
        return 0;
    }
    usartFlush(); //make sure all buffered data has been written to the interface
     1c2:	0e 94 a9 02 	call	0x552	; 0x552 <usartFlush>
    return cnt;
     1c6:	81 2f       	mov	r24, r17
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <usartStringPrint+0x74>
    va_end(args);

    if (cnt <= usartAvailableForWrite()) { //check if ringbuffer size is big enough for the string
        usartStringWrite(buffer);
    } else {
        return 0;
     1ca:	80 e0       	ldi	r24, 0x00	; 0
    }
    usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de be       	out	0x3e, r13	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd be       	out	0x3d, r12	; 61
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	bf 90       	pop	r11
     1e8:	af 90       	pop	r10
     1ea:	08 95       	ret

000001ec <usartStringPrintln>:
uint8_t usartStringPrintln(const char* format, ...) //function is nearly the same like usartTringPrint
{
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	0b 85       	ldd	r16, Y+11	; 0x0b
     202:	1c 85       	ldd	r17, Y+12	; 0x0c
    } else {
        return 0;
    }
    usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
     204:	cd b6       	in	r12, 0x3d	; 61
     206:	de b6       	in	r13, 0x3e	; 62
uint8_t usartStringPrintln(const char* format, ...) //function is nearly the same like usartTringPrint
{
    uint8_t cnt = 0;
    uint8_t newlineBacklashAdd = 2; //need to append 2 characters /r/n
    va_list args;
    char buffer[usartAvailableForWrite()]; //make a buffer for the string from va_list
     208:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     20c:	2d b7       	in	r18, 0x3d	; 61
     20e:	3e b7       	in	r19, 0x3e	; 62
     210:	28 1b       	sub	r18, r24
     212:	31 09       	sbc	r19, r1
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	3e bf       	out	0x3e, r19	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	2d bf       	out	0x3d, r18	; 61
     21e:	8d b7       	in	r24, 0x3d	; 61
     220:	9e b7       	in	r25, 0x3e	; 62
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	7c 01       	movw	r14, r24
    if (usartAvailableForWrite() >= (strlen(format) + newlineBacklashAdd)) { //check if ringbuffer size is big enough for the string +2 for \r\n
     226:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	f8 01       	movw	r30, r16
     22e:	01 90       	ld	r0, Z+
     230:	00 20       	and	r0, r0
     232:	e9 f7       	brne	.-6      	; 0x22e <usartStringPrintln+0x42>
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	e0 1b       	sub	r30, r16
     238:	f1 0b       	sbc	r31, r17
     23a:	32 96       	adiw	r30, 0x02	; 2
     23c:	8e 17       	cp	r24, r30
     23e:	9f 07       	cpc	r25, r31
     240:	d8 f0       	brcs	.+54     	; 0x278 <usartStringPrintln+0x8c>
        va_start(args, format);
        cnt = vsnprintf(buffer, usartAvailableForWrite(), format, args); //got this from https://www.educative.io/answers/what-is-vsnprintf-in-c
     242:	0e 94 56 02 	call	0x4ac	; 0x4ac <usartAvailableForWrite>
     246:	68 2f       	mov	r22, r24
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	9e 01       	movw	r18, r28
     24c:	23 5f       	subi	r18, 0xF3	; 243
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	a8 01       	movw	r20, r16
     252:	c7 01       	movw	r24, r14
     254:	0e 94 96 05 	call	0xb2c	; 0xb2c <vsnprintf>
     258:	18 2f       	mov	r17, r24
        usartStringWrite(buffer);
     25a:	c7 01       	movw	r24, r14
     25c:	0e 94 79 00 	call	0xf2	; 0xf2 <usartStringWrite>
        cnt += usartWrite('\r');
     260:	8d e0       	ldi	r24, 0x0D	; 13
     262:	0e 94 66 02 	call	0x4cc	; 0x4cc <usartWrite>
     266:	18 0f       	add	r17, r24
        cnt += usartWrite('\n');
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	0e 94 66 02 	call	0x4cc	; 0x4cc <usartWrite>
     26e:	18 0f       	add	r17, r24
        va_end(args);
    } else {
        return 0;
    }
    usartFlush(); //make sure all buffered data has been written to the interface
     270:	0e 94 a9 02 	call	0x552	; 0x552 <usartFlush>
    return cnt;
     274:	81 2f       	mov	r24, r17
     276:	01 c0       	rjmp	.+2      	; 0x27a <usartStringPrintln+0x8e>
        usartStringWrite(buffer);
        cnt += usartWrite('\r');
        cnt += usartWrite('\n');
        va_end(args);
    } else {
        return 0;
     278:	80 e0       	ldi	r24, 0x00	; 0
    }
    usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de be       	out	0x3e, r13	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd be       	out	0x3d, r12	; 61
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	df 90       	pop	r13
     292:	cf 90       	pop	r12
     294:	08 95       	ret

00000296 <ringBufferCapacity>:
            bytes[i] = temp;
            cnt++;
        }
    }
    return cnt;
}
     296:	8f e7       	ldi	r24, 0x7F	; 127
     298:	08 95       	ret

0000029a <__vector_19>:
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
     2b0:	af 93       	push	r26
     2b2:	bf 93       	push	r27
     2b4:	ef 93       	push	r30
     2b6:	ff 93       	push	r31
     2b8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <write>
     2bc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <write+0x1>
     2c0:	fc 01       	movw	r30, r24
     2c2:	ec 57       	subi	r30, 0x7C	; 124
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	20 81       	ld	r18, Z
     2c8:	22 23       	and	r18, r18
     2ca:	11 f1       	breq	.+68     	; 0x310 <__vector_19+0x76>
     2cc:	34 97       	sbiw	r30, 0x04	; 4
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	30 81       	ld	r19, Z
     2d6:	ac 01       	movw	r20, r24
     2d8:	41 58       	subi	r20, 0x81	; 129
     2da:	5f 4f       	sbci	r21, 0xFF	; 255
     2dc:	e4 17       	cp	r30, r20
     2de:	f5 07       	cpc	r31, r21
     2e0:	31 f4       	brne	.+12     	; 0x2ee <__vector_19+0x54>
     2e2:	fc 01       	movw	r30, r24
     2e4:	e0 58       	subi	r30, 0x80	; 128
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	91 83       	std	Z+1, r25	; 0x01
     2ea:	80 83       	st	Z, r24
     2ec:	06 c0       	rjmp	.+12     	; 0x2fa <__vector_19+0x60>
     2ee:	dc 01       	movw	r26, r24
     2f0:	a0 58       	subi	r26, 0x80	; 128
     2f2:	bf 4f       	sbci	r27, 0xFF	; 255
     2f4:	31 96       	adiw	r30, 0x01	; 1
     2f6:	ed 93       	st	X+, r30
     2f8:	fc 93       	st	X, r31
     2fa:	fc 01       	movw	r30, r24
     2fc:	ec 57       	subi	r30, 0x7C	; 124
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	21 50       	subi	r18, 0x01	; 1
     302:	20 83       	st	Z, r18
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	20 81       	ld	r18, Z
     308:	22 23       	and	r18, r18
     30a:	21 f0       	breq	.+8      	; 0x314 <__vector_19+0x7a>
     30c:	10 82       	st	Z, r1
     30e:	03 c0       	rjmp	.+6      	; 0x316 <__vector_19+0x7c>
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	01 c0       	rjmp	.+2      	; 0x316 <__vector_19+0x7c>
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	22 23       	and	r18, r18
     318:	19 f0       	breq	.+6      	; 0x320 <__vector_19+0x86>
     31a:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     31e:	05 c0       	rjmp	.+10     	; 0x32a <__vector_19+0x90>
     320:	e1 ec       	ldi	r30, 0xC1	; 193
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	8f 7d       	andi	r24, 0xDF	; 223
     328:	80 83       	st	Z, r24
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	5f 91       	pop	r21
     338:	4f 91       	pop	r20
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_18>:
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	2f 93       	push	r18
     354:	3f 93       	push	r19
     356:	4f 93       	push	r20
     358:	5f 93       	push	r21
     35a:	6f 93       	push	r22
     35c:	7f 93       	push	r23
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
     362:	af 93       	push	r26
     364:	bf 93       	push	r27
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
     36a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     36e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <read>
     372:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <read+0x1>
     376:	fc 01       	movw	r30, r24
     378:	eb 57       	subi	r30, 0x7B	; 123
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	30 81       	ld	r19, Z
     37e:	31 11       	cpse	r19, r1
     380:	26 c0       	rjmp	.+76     	; 0x3ce <__vector_18+0x86>
     382:	33 97       	sbiw	r30, 0x03	; 3
     384:	a0 81       	ld	r26, Z
     386:	b1 81       	ldd	r27, Z+1	; 0x01
     388:	2c 93       	st	X, r18
     38a:	40 81       	ld	r20, Z
     38c:	51 81       	ldd	r21, Z+1	; 0x01
     38e:	bc 01       	movw	r22, r24
     390:	61 58       	subi	r22, 0x81	; 129
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	46 17       	cp	r20, r22
     396:	57 07       	cpc	r21, r23
     398:	19 f4       	brne	.+6      	; 0x3a0 <__vector_18+0x58>
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <__vector_18+0x66>
     3a0:	fc 01       	movw	r30, r24
     3a2:	ee 57       	subi	r30, 0x7E	; 126
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	5f 4f       	sbci	r21, 0xFF	; 255
     3aa:	51 83       	std	Z+1, r21	; 0x01
     3ac:	40 83       	st	Z, r20
     3ae:	fc 01       	movw	r30, r24
     3b0:	ec 57       	subi	r30, 0x7C	; 124
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
     3b4:	20 81       	ld	r18, Z
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	20 83       	st	Z, r18
     3ba:	2f 37       	cpi	r18, 0x7F	; 127
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_18+0x78>
     3be:	31 e0       	ldi	r19, 0x01	; 1
     3c0:	33 23       	and	r19, r19
     3c2:	29 f0       	breq	.+10     	; 0x3ce <__vector_18+0x86>
     3c4:	fc 01       	movw	r30, r24
     3c6:	eb 57       	subi	r30, 0x7B	; 123
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	20 83       	st	Z, r18
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <usartSetup>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	a0 e0       	ldi	r26, 0x00	; 0
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	aa 1f       	adc	r26, r26
     3fe:	bb 1f       	adc	r27, r27
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	aa 1f       	adc	r26, r26
     406:	bb 1f       	adc	r27, r27
     408:	9c 01       	movw	r18, r24
     40a:	ad 01       	movw	r20, r26
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	44 1f       	adc	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	22 0f       	add	r18, r18
     416:	33 1f       	adc	r19, r19
     418:	44 1f       	adc	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	74 e2       	ldi	r23, 0x24	; 36
     420:	84 ef       	ldi	r24, 0xF4	; 244
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 47 04 	call	0x88e	; 0x88e <__udivmodsi4>
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	31 09       	sbc	r19, r1
     42c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     430:	e2 ec       	ldi	r30, 0xC2	; 194
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	8f 7b       	andi	r24, 0xBF	; 191
     438:	80 83       	st	Z, r24
     43a:	80 83       	st	Z, r24
     43c:	e1 ec       	ldi	r30, 0xC1	; 193
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	80 61       	ori	r24, 0x10	; 16
     444:	80 83       	st	Z, r24
     446:	80 81       	ld	r24, Z
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	80 83       	st	Z, r24
     44c:	80 81       	ld	r24, Z
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
     452:	86 e8       	ldi	r24, 0x86	; 134
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
     45a:	ec 01       	movw	r28, r24
     45c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <read+0x1>
     460:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <read>
     464:	86 e8       	ldi	r24, 0x86	; 134
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
     46c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <write+0x1>
     470:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <write>
     474:	fe 01       	movw	r30, r28
     476:	e0 58       	subi	r30, 0x80	; 128
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	d1 83       	std	Z+1, r29	; 0x01
     47c:	c0 83       	st	Z, r28
     47e:	32 96       	adiw	r30, 0x02	; 2
     480:	d1 83       	std	Z+1, r29	; 0x01
     482:	c0 83       	st	Z, r28
     484:	32 96       	adiw	r30, 0x02	; 2
     486:	10 82       	st	Z, r1
     488:	cb 57       	subi	r28, 0x7B	; 123
     48a:	df 4f       	sbci	r29, 0xFF	; 255
     48c:	18 82       	st	Y, r1
     48e:	fc 01       	movw	r30, r24
     490:	e0 58       	subi	r30, 0x80	; 128
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	32 96       	adiw	r30, 0x02	; 2
     49a:	91 83       	std	Z+1, r25	; 0x01
     49c:	80 83       	st	Z, r24
     49e:	32 96       	adiw	r30, 0x02	; 2
     4a0:	10 82       	st	Z, r1
     4a2:	31 96       	adiw	r30, 0x01	; 1
     4a4:	10 82       	st	Z, r1
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <usartAvailableForWrite>:
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <write>
     4b4:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <write+0x1>
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 4b 01 	call	0x296	; 0x296 <ringBufferCapacity>
     4be:	cc 57       	subi	r28, 0x7C	; 124
     4c0:	df 4f       	sbci	r29, 0xFF	; 255
     4c2:	98 81       	ld	r25, Y
     4c4:	89 1b       	sub	r24, r25
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <usartWrite>:
bool usartWrite(uint8_t byte)
{
    bool push;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) //got this from https://www.nongnu.org/avr-libc/user-manual/group__util__atomic.html
     4cc:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4ce:	f8 94       	cli
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	35 c0       	rjmp	.+106    	; 0x53e <usartWrite+0x72>
    {
        push = ringBufferPush(write, byte);
     4d4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <write>
     4d8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <write+0x1>
 * @param[in] value The element to be added
 * @return  True if successful, false otherwise
*/
static inline bool ringBufferPush(RingBuffer* ringBuffer, uint8_t value)
{
    if (ringBuffer->isFull) { //if the buffer is full return
     4dc:	f9 01       	movw	r30, r18
     4de:	eb 57       	subi	r30, 0x7B	; 123
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	60 81       	ld	r22, Z
     4e4:	61 11       	cpse	r22, r1
     4e6:	27 c0       	rjmp	.+78     	; 0x536 <usartWrite+0x6a>
        return false;
    }
    *ringBuffer->write = value;
     4e8:	33 97       	sbiw	r30, 0x03	; 3
     4ea:	a0 81       	ld	r26, Z
     4ec:	b1 81       	ldd	r27, Z+1	; 0x01
     4ee:	8c 93       	st	X, r24

    if (ringBuffer->write == &ringBuffer->buffer[RING_BUFFER_CAPACITY - 1]) { //check if the write pointer is standing at the the end of the buffer
     4f0:	40 81       	ld	r20, Z
     4f2:	51 81       	ldd	r21, Z+1	; 0x01
     4f4:	33 97       	sbiw	r30, 0x03	; 3
     4f6:	4e 17       	cp	r20, r30
     4f8:	5f 07       	cpc	r21, r31
     4fa:	21 f4       	brne	.+8      	; 0x504 <usartWrite+0x38>
        ringBuffer->write = ringBuffer->buffer;
     4fc:	33 96       	adiw	r30, 0x03	; 3
     4fe:	31 83       	std	Z+1, r19	; 0x01
     500:	20 83       	st	Z, r18
     502:	07 c0       	rjmp	.+14     	; 0x512 <usartWrite+0x46>
    } else {
        ringBuffer->write++;
     504:	f9 01       	movw	r30, r18
     506:	ee 57       	subi	r30, 0x7E	; 126
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	4f 5f       	subi	r20, 0xFF	; 255
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	51 83       	std	Z+1, r21	; 0x01
     510:	40 83       	st	Z, r20
    }
    ringBuffer->usedCapacity++;
     512:	f9 01       	movw	r30, r18
     514:	ec 57       	subi	r30, 0x7C	; 124
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	90 81       	ld	r25, Z
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	90 83       	st	Z, r25
 * @param ringBuffer The RingBuffer instance
 * @return  True if full, false otherwise
*/
static inline bool ringBufferFull(const RingBuffer* ringBuffer)
{
    if (ringBuffer->usedCapacity == RING_BUFFER_CAPACITY - 1) {
     51e:	9f 37       	cpi	r25, 0x7F	; 127
     520:	09 f4       	brne	.+2      	; 0x524 <usartWrite+0x58>
        return true;
     522:	61 e0       	ldi	r22, 0x01	; 1
        ringBuffer->write = ringBuffer->buffer;
    } else {
        ringBuffer->write++;
    }
    ringBuffer->usedCapacity++;
    if (ringBufferFull(ringBuffer) == true) { //check if buffer is now full if yes Full=true
     524:	66 23       	and	r22, r22
     526:	49 f0       	breq	.+18     	; 0x53a <usartWrite+0x6e>
        ringBuffer->isFull = true;
     528:	f9 01       	movw	r30, r18
     52a:	eb 57       	subi	r30, 0x7B	; 123
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	90 83       	st	Z, r25
    }
    return true;
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	03 c0       	rjmp	.+6      	; 0x53c <usartWrite+0x70>
 * @return  True if successful, false otherwise
*/
static inline bool ringBufferPush(RingBuffer* ringBuffer, uint8_t value)
{
    if (ringBuffer->isFull) { //if the buffer is full return
        return false;
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	01 c0       	rjmp	.+2      	; 0x53c <usartWrite+0x70>
    }
    ringBuffer->usedCapacity++;
    if (ringBufferFull(ringBuffer) == true) { //check if buffer is now full if yes Full=true
        ringBuffer->isFull = true;
    }
    return true;
     53a:	21 e0       	ldi	r18, 0x01	; 1
}
bool usartWrite(uint8_t byte)
{
    bool push;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) //got this from https://www.nongnu.org/avr-libc/user-manual/group__util__atomic.html
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 11       	cpse	r25, r1
     540:	c9 cf       	rjmp	.-110    	; 0x4d4 <usartWrite+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     542:	7f bf       	out	0x3f, r23	; 63
    BIT_SET(UCSR0B, RXCIE0);
}

static inline void enableTransmitBufferEmptyInterrupt() //set UDRIE 1= enable data Register empty interrrupt
{
    BIT_SET(UCSR0B, UDRIE0);
     544:	e1 ec       	ldi	r30, 0xC1	; 193
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 62       	ori	r24, 0x20	; 32
     54c:	80 83       	st	Z, r24
    {
        push = ringBufferPush(write, byte);
    }
    enableTransmitBufferEmptyInterrupt();
    return push;
}
     54e:	82 2f       	mov	r24, r18
     550:	08 95       	ret

00000552 <usartFlush>:
void usartFlush()
{
    while (ringBufferEmpty(write) == false) { //wait until the buffer is empty
     552:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <write>
     556:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <write+0x1>
 * @param ringBuffer The RingBuffer instance
 * @return  True if empty, false otherwise
*/
static inline bool ringBufferEmpty(const RingBuffer* ringBuffer)
{
    if (ringBuffer->read == ringBuffer->write) { //when read and write pointer are the same the buffer is empty
     55a:	fc 01       	movw	r30, r24
     55c:	e0 58       	subi	r30, 0x80	; 128
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	20 81       	ld	r18, Z
     562:	31 81       	ldd	r19, Z+1	; 0x01
     564:	32 96       	adiw	r30, 0x02	; 2
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	82 17       	cp	r24, r18
     56c:	93 07       	cpc	r25, r19
     56e:	11 f4       	brne	.+4      	; 0x574 <usartFlush+0x22>
        return true;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	01 c0       	rjmp	.+2      	; 0x576 <usartFlush+0x24>
    } else {
        return false;
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	88 23       	and	r24, r24
     578:	61 f3       	breq	.-40     	; 0x552 <usartFlush>
        //do nothing
    }
    if (BIT_IS_SET(UCSR0A, UDRE0) && ringBufferEmpty(write) == true) { //check if buffer empty and empty data register flag is set
     57a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     57e:	08 95       	ret

00000580 <__vector_1>:
    BIT_SET(EICRA, ISC11);
    BIT_SET(EIMSK, INT1); //enable Pin PD3 ext interrupt
}

ISR(INT0_vect) //service Routine for reference Point
{
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	8f 93       	push	r24
    isr = true;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <isr>
    home = false;
     592:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <home>
    counter = 0;
     596:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <counter>
     59a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <counter+0x1>
     59e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <counter+0x2>
     5a2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <counter+0x3>
     5a6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <counter+0x4>
     5aa:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <counter+0x5>
     5ae:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <counter+0x6>
     5b2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <counter+0x7>
    MMcounter = 0;
     5b6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
     5ba:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
     5be:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end+0x2>
     5c2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x3>
     5c6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end+0x4>
     5ca:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x5>
     5ce:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end+0x6>
     5d2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x7>
}
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_2>:

ISR(INT1_vect) //service Routine for length measuring
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	ef 93       	push	r30

    counter++;
     600:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <counter>
     604:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <counter+0x1>
     608:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <counter+0x2>
     60c:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <counter+0x3>
     610:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <counter+0x4>
     614:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <counter+0x5>
     618:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <counter+0x6>
     61c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <counter+0x7>
     620:	a1 e0       	ldi	r26, 0x01	; 1
     622:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__adddi3_s8>
     626:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <counter>
     62a:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <counter+0x1>
     62e:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <counter+0x2>
     632:	50 93 2d 01 	sts	0x012D, r21	; 0x80012d <counter+0x3>
     636:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <counter+0x4>
     63a:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <counter+0x5>
     63e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <counter+0x6>
     642:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <counter+0x7>
    if (counter == 200) { //equals to 1mm
     646:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <counter>
     64a:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <counter+0x1>
     64e:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <counter+0x2>
     652:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <counter+0x3>
     656:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <counter+0x4>
     65a:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <counter+0x5>
     65e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <counter+0x6>
     662:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <counter+0x7>
     666:	28 3c       	cpi	r18, 0xC8	; 200
     668:	31 05       	cpc	r19, r1
     66a:	41 05       	cpc	r20, r1
     66c:	51 05       	cpc	r21, r1
     66e:	61 05       	cpc	r22, r1
     670:	71 05       	cpc	r23, r1
     672:	81 05       	cpc	r24, r1
     674:	91 05       	cpc	r25, r1
     676:	91 f5       	brne	.+100    	; 0x6dc <__vector_2+0xfa>
        MMcounter++;
     678:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
     67c:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
     680:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <__data_end+0x2>
     684:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <__data_end+0x3>
     688:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end+0x4>
     68c:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x5>
     690:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end+0x6>
     694:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x7>
     698:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__adddi3_s8>
     69c:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
     6a0:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <__data_end+0x1>
     6a4:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <__data_end+0x2>
     6a8:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <__data_end+0x3>
     6ac:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end+0x4>
     6b0:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x5>
     6b4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end+0x6>
     6b8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x7>
        counter = 0;
     6bc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <counter>
     6c0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <counter+0x1>
     6c4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <counter+0x2>
     6c8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <counter+0x3>
     6cc:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <counter+0x4>
     6d0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <counter+0x5>
     6d4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <counter+0x6>
     6d8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <counter+0x7>
    }
}
     6dc:	ef 91       	pop	r30
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <main>:

int main(void)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29

    uint8_t count = 0;
    uint8_t i = 0;
    usartSetup(USART_B9600);
     6fe:	80 e8       	ldi	r24, 0x80	; 128
     700:	95 e2       	ldi	r25, 0x25	; 37
     702:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <usartSetup>
    _delay_ms(2);
    BIT_TOGGLE(PORTC, stepPin);
}
static inline void setupStepper()
{
    BIT_SET(DDRC, stepPin);
     706:	87 b1       	in	r24, 0x07	; 7
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	87 b9       	out	0x07, r24	; 7
    BIT_SET(DDRC, enablePin);
     70c:	87 b1       	in	r24, 0x07	; 7
     70e:	84 60       	ori	r24, 0x04	; 4
     710:	87 b9       	out	0x07, r24	; 7
    BIT_SET(DDRC, directionPin);
     712:	87 b1       	in	r24, 0x07	; 7
     714:	82 60       	ori	r24, 0x02	; 2
     716:	87 b9       	out	0x07, r24	; 7
    BIT_SET(PORTC, enablePin);
     718:	88 b1       	in	r24, 0x08	; 8
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	88 b9       	out	0x08, r24	; 8
    BIT_SET(PORTC, directionPin);
     71e:	88 b1       	in	r24, 0x08	; 8
     720:	82 60       	ori	r24, 0x02	; 2
     722:	88 b9       	out	0x08, r24	; 8

    uint8_t count = 0;
    uint8_t i = 0;
    usartSetup(USART_B9600);
    setupStepper();
    BIT_CLR(DDRB, PB4); //PB4 Input
     724:	84 b1       	in	r24, 0x04	; 4
     726:	8f 7e       	andi	r24, 0xEF	; 239
     728:	84 b9       	out	0x04, r24	; 4
    //BIT_SET(PORTB, PB4); //Activate PullUp Resistor necessary for Photoelectric barrier (Open-Collector)
    sei();
     72a:	78 94       	sei

static inline void setupExtInterrupt()
{

    //Pin PD2 (INT0)
    BIT_SET(EICRA, ISC00); // enable rising edge
     72c:	e9 e6       	ldi	r30, 0x69	; 105
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	81 60       	ori	r24, 0x01	; 1
     734:	80 83       	st	Z, r24
    BIT_SET(EICRA, ISC01);
     736:	80 81       	ld	r24, Z
     738:	82 60       	ori	r24, 0x02	; 2
     73a:	80 83       	st	Z, r24
    BIT_SET(EIMSK, INT0); //enable Pin PD2 ext interrupt
     73c:	8d b3       	in	r24, 0x1d	; 29
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	8d bb       	out	0x1d, r24	; 29

    //Pin PD3 (INT0)
    BIT_SET(EICRA, ISC10); // enable rising edge
     742:	80 81       	ld	r24, Z
     744:	84 60       	ori	r24, 0x04	; 4
     746:	80 83       	st	Z, r24
    BIT_SET(EICRA, ISC11);
     748:	80 81       	ld	r24, Z
     74a:	88 60       	ori	r24, 0x08	; 8
     74c:	80 83       	st	Z, r24
    BIT_SET(EIMSK, INT1); //enable Pin PD3 ext interrupt
     74e:	8d b3       	in	r24, 0x1d	; 29
     750:	82 60       	ori	r24, 0x02	; 2
     752:	8d bb       	out	0x1d, r24	; 29
}

int main(void)
{

    uint8_t count = 0;
     754:	d0 e0       	ldi	r29, 0x00	; 0
    //BIT_SET(PORTB, PB4); //Activate PullUp Resistor necessary for Photoelectric barrier (Open-Collector)
    sei();
    setupExtInterrupt();
    while (1) {

        if (BIT_IS_SET(PINB, PB4)) {
     756:	1c 99       	sbic	0x03, 4	; 3
     758:	63 c0       	rjmp	.+198    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     75a:	66 c0       	rjmp	.+204    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
            for (i = 0; i < 100; i++) {
                if (i == 0) {
     75c:	c1 11       	cpse	r28, r1
     75e:	48 c0       	rjmp	.+144    	; 0x7f0 <main+0xf6>
                    usartStringPrint("%d,", MMcounter);
     760:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     764:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     768:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end+0x2>
     76c:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x3>
     770:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <__data_end+0x4>
     774:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <__data_end+0x5>
     778:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end+0x6>
     77c:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x7>
     780:	7f 93       	push	r23
     782:	6f 93       	push	r22
     784:	5f 93       	push	r21
     786:	4f 93       	push	r20
     788:	3f 93       	push	r19
     78a:	2f 93       	push	r18
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 ac 00 	call	0x158	; 0x158 <usartStringPrint>
                    usartStringPrintln("%d", counter);
     79c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <counter>
     7a0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <counter+0x1>
     7a4:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <counter+0x2>
     7a8:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <counter+0x3>
     7ac:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <counter+0x4>
     7b0:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <counter+0x5>
     7b4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <counter+0x6>
     7b8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <counter+0x7>
     7bc:	7f 93       	push	r23
     7be:	6f 93       	push	r22
     7c0:	5f 93       	push	r21
     7c2:	4f 93       	push	r20
     7c4:	3f 93       	push	r19
     7c6:	2f 93       	push	r18
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	8b e0       	ldi	r24, 0x0B	; 11
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <usartStringPrintln>
                    count++;
     7d8:	df 5f       	subi	r29, 0xFF	; 255
                    home = true;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <home>
     7e0:	8d b7       	in	r24, 0x3d	; 61
     7e2:	9e b7       	in	r25, 0x3e	; 62
     7e4:	44 96       	adiw	r24, 0x14	; 20
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	9e bf       	out	0x3e, r25	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	8d bf       	out	0x3d, r24	; 61
                }
                Toggle(home);
     7f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <home>
bool isr;
bool home = true;

static inline void Toggle(bool Home)
{
    if (!Home) {
     7f4:	81 11       	cpse	r24, r1
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <main+0x104>
        BIT_CLR(PORTC, directionPin);
     7f8:	98 b1       	in	r25, 0x08	; 8
     7fa:	9d 7f       	andi	r25, 0xFD	; 253
     7fc:	98 b9       	out	0x08, r25	; 8
    }
    if (Home) {
     7fe:	88 23       	and	r24, r24
     800:	19 f0       	breq	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
        BIT_SET(PORTC, directionPin);
     802:	88 b1       	in	r24, 0x08	; 8
     804:	82 60       	ori	r24, 0x02	; 2
     806:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     808:	8f e3       	ldi	r24, 0x3F	; 63
     80a:	9f e1       	ldi	r25, 0x1F	; 31
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     812:	00 00       	nop
    }
    _delay_ms(2);
    BIT_TOGGLE(PORTC, stepPin);
     814:	98 b1       	in	r25, 0x08	; 8
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	89 27       	eor	r24, r25
     81a:	88 b9       	out	0x08, r24	; 8
    sei();
    setupExtInterrupt();
    while (1) {

        if (BIT_IS_SET(PINB, PB4)) {
            for (i = 0; i < 100; i++) {
     81c:	cf 5f       	subi	r28, 0xFF	; 255
     81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     820:	c0 e0       	ldi	r28, 0x00	; 0
     822:	c4 36       	cpi	r28, 0x64	; 100
     824:	08 f4       	brcc	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     826:	9a cf       	rjmp	.-204    	; 0x75c <main+0x62>
                }
                Toggle(home);
            }
        }

        Toggle(home);
     828:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <home>
bool isr;
bool home = true;

static inline void Toggle(bool Home)
{
    if (!Home) {
     82c:	81 11       	cpse	r24, r1
     82e:	03 c0       	rjmp	.+6      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
        BIT_CLR(PORTC, directionPin);
     830:	98 b1       	in	r25, 0x08	; 8
     832:	9d 7f       	andi	r25, 0xFD	; 253
     834:	98 b9       	out	0x08, r25	; 8
    }
    if (Home) {
     836:	88 23       	and	r24, r24
     838:	19 f0       	breq	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
        BIT_SET(PORTC, directionPin);
     83a:	88 b1       	in	r24, 0x08	; 8
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	88 b9       	out	0x08, r24	; 8
     840:	8f e3       	ldi	r24, 0x3F	; 63
     842:	9f e1       	ldi	r25, 0x1F	; 31
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
    }
    _delay_ms(2);
    BIT_TOGGLE(PORTC, stepPin);
     84c:	98 b1       	in	r25, 0x08	; 8
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	89 27       	eor	r24, r25
     852:	88 b9       	out	0x08, r24	; 8
                Toggle(home);
            }
        }

        Toggle(home);
        if (isr) {
     854:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <isr>
     858:	81 11       	cpse	r24, r1
            // usartStringPrintln("referencePoint");	//check for reference point
            isr = false;
     85a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <isr>
        }
        if (count == 100) {
     85e:	d4 36       	cpi	r29, 0x64	; 100
     860:	09 f0       	breq	.+2      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     862:	79 cf       	rjmp	.-270    	; 0x756 <main+0x5c>
            usartStringPrintln("\n");
     864:	8e e0       	ldi	r24, 0x0E	; 14
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <usartStringPrintln>
            usartStringPrintln("Programm finished");
     870:	80 e1       	ldi	r24, 0x10	; 16
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 f6 00 	call	0x1ec	; 0x1ec <usartStringPrintln>
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
            return 0;
        }
    }
}
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <__udivmodsi4>:
     88e:	a1 e2       	ldi	r26, 0x21	; 33
     890:	1a 2e       	mov	r1, r26
     892:	aa 1b       	sub	r26, r26
     894:	bb 1b       	sub	r27, r27
     896:	fd 01       	movw	r30, r26
     898:	0d c0       	rjmp	.+26     	; 0x8b4 <__udivmodsi4_ep>

0000089a <__udivmodsi4_loop>:
     89a:	aa 1f       	adc	r26, r26
     89c:	bb 1f       	adc	r27, r27
     89e:	ee 1f       	adc	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	a2 17       	cp	r26, r18
     8a4:	b3 07       	cpc	r27, r19
     8a6:	e4 07       	cpc	r30, r20
     8a8:	f5 07       	cpc	r31, r21
     8aa:	20 f0       	brcs	.+8      	; 0x8b4 <__udivmodsi4_ep>
     8ac:	a2 1b       	sub	r26, r18
     8ae:	b3 0b       	sbc	r27, r19
     8b0:	e4 0b       	sbc	r30, r20
     8b2:	f5 0b       	sbc	r31, r21

000008b4 <__udivmodsi4_ep>:
     8b4:	66 1f       	adc	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	88 1f       	adc	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	1a 94       	dec	r1
     8be:	69 f7       	brne	.-38     	; 0x89a <__udivmodsi4_loop>
     8c0:	60 95       	com	r22
     8c2:	70 95       	com	r23
     8c4:	80 95       	com	r24
     8c6:	90 95       	com	r25
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	bd 01       	movw	r22, r26
     8ce:	cf 01       	movw	r24, r30
     8d0:	08 95       	ret

000008d2 <__adddi3_s8>:
     8d2:	00 24       	eor	r0, r0
     8d4:	a7 fd       	sbrc	r26, 7
     8d6:	00 94       	com	r0
     8d8:	2a 0f       	add	r18, r26
     8da:	30 1d       	adc	r19, r0
     8dc:	40 1d       	adc	r20, r0
     8de:	50 1d       	adc	r21, r0
     8e0:	60 1d       	adc	r22, r0
     8e2:	70 1d       	adc	r23, r0
     8e4:	80 1d       	adc	r24, r0
     8e6:	90 1d       	adc	r25, r0
     8e8:	08 95       	ret

000008ea <malloc>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	91 05       	cpc	r25, r1
     8f6:	10 f4       	brcc	.+4      	; 0x8fc <malloc+0x12>
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <__flp>
     900:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <__flp+0x1>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	30 97       	sbiw	r30, 0x00	; 0
     90e:	19 f1       	breq	.+70     	; 0x956 <__stack+0x57>
     910:	40 81       	ld	r20, Z
     912:	51 81       	ldd	r21, Z+1	; 0x01
     914:	02 81       	ldd	r16, Z+2	; 0x02
     916:	13 81       	ldd	r17, Z+3	; 0x03
     918:	48 17       	cp	r20, r24
     91a:	59 07       	cpc	r21, r25
     91c:	c8 f0       	brcs	.+50     	; 0x950 <__stack+0x51>
     91e:	84 17       	cp	r24, r20
     920:	95 07       	cpc	r25, r21
     922:	69 f4       	brne	.+26     	; 0x93e <__stack+0x3f>
     924:	10 97       	sbiw	r26, 0x00	; 0
     926:	31 f0       	breq	.+12     	; 0x934 <__stack+0x35>
     928:	12 96       	adiw	r26, 0x02	; 2
     92a:	0c 93       	st	X, r16
     92c:	12 97       	sbiw	r26, 0x02	; 2
     92e:	13 96       	adiw	r26, 0x03	; 3
     930:	1c 93       	st	X, r17
     932:	27 c0       	rjmp	.+78     	; 0x982 <__stack+0x83>
     934:	00 93 39 01 	sts	0x0139, r16	; 0x800139 <__flp>
     938:	10 93 3a 01 	sts	0x013A, r17	; 0x80013a <__flp+0x1>
     93c:	22 c0       	rjmp	.+68     	; 0x982 <__stack+0x83>
     93e:	21 15       	cp	r18, r1
     940:	31 05       	cpc	r19, r1
     942:	19 f0       	breq	.+6      	; 0x94a <__stack+0x4b>
     944:	42 17       	cp	r20, r18
     946:	53 07       	cpc	r21, r19
     948:	18 f4       	brcc	.+6      	; 0x950 <__stack+0x51>
     94a:	9a 01       	movw	r18, r20
     94c:	bd 01       	movw	r22, r26
     94e:	ef 01       	movw	r28, r30
     950:	df 01       	movw	r26, r30
     952:	f8 01       	movw	r30, r16
     954:	db cf       	rjmp	.-74     	; 0x90c <__stack+0xd>
     956:	21 15       	cp	r18, r1
     958:	31 05       	cpc	r19, r1
     95a:	f9 f0       	breq	.+62     	; 0x99a <__stack+0x9b>
     95c:	28 1b       	sub	r18, r24
     95e:	39 0b       	sbc	r19, r25
     960:	24 30       	cpi	r18, 0x04	; 4
     962:	31 05       	cpc	r19, r1
     964:	80 f4       	brcc	.+32     	; 0x986 <__stack+0x87>
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	9b 81       	ldd	r25, Y+3	; 0x03
     96a:	61 15       	cp	r22, r1
     96c:	71 05       	cpc	r23, r1
     96e:	21 f0       	breq	.+8      	; 0x978 <__stack+0x79>
     970:	fb 01       	movw	r30, r22
     972:	93 83       	std	Z+3, r25	; 0x03
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x81>
     978:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__flp+0x1>
     97c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__flp>
     980:	fe 01       	movw	r30, r28
     982:	32 96       	adiw	r30, 0x02	; 2
     984:	44 c0       	rjmp	.+136    	; 0xa0e <__stack+0x10f>
     986:	fe 01       	movw	r30, r28
     988:	e2 0f       	add	r30, r18
     98a:	f3 1f       	adc	r31, r19
     98c:	81 93       	st	Z+, r24
     98e:	91 93       	st	Z+, r25
     990:	22 50       	subi	r18, 0x02	; 2
     992:	31 09       	sbc	r19, r1
     994:	39 83       	std	Y+1, r19	; 0x01
     996:	28 83       	st	Y, r18
     998:	3a c0       	rjmp	.+116    	; 0xa0e <__stack+0x10f>
     99a:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <__brkval>
     99e:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <__brkval+0x1>
     9a2:	23 2b       	or	r18, r19
     9a4:	41 f4       	brne	.+16     	; 0x9b6 <__stack+0xb7>
     9a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     9aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     9ae:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <__brkval+0x1>
     9b2:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <__brkval>
     9b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9be:	21 15       	cp	r18, r1
     9c0:	31 05       	cpc	r19, r1
     9c2:	41 f4       	brne	.+16     	; 0x9d4 <__stack+0xd5>
     9c4:	2d b7       	in	r18, 0x3d	; 61
     9c6:	3e b7       	in	r19, 0x3e	; 62
     9c8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     9cc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     9d0:	24 1b       	sub	r18, r20
     9d2:	35 0b       	sbc	r19, r21
     9d4:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <__brkval>
     9d8:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <__brkval+0x1>
     9dc:	e2 17       	cp	r30, r18
     9de:	f3 07       	cpc	r31, r19
     9e0:	a0 f4       	brcc	.+40     	; 0xa0a <__stack+0x10b>
     9e2:	2e 1b       	sub	r18, r30
     9e4:	3f 0b       	sbc	r19, r31
     9e6:	28 17       	cp	r18, r24
     9e8:	39 07       	cpc	r19, r25
     9ea:	78 f0       	brcs	.+30     	; 0xa0a <__stack+0x10b>
     9ec:	ac 01       	movw	r20, r24
     9ee:	4e 5f       	subi	r20, 0xFE	; 254
     9f0:	5f 4f       	sbci	r21, 0xFF	; 255
     9f2:	24 17       	cp	r18, r20
     9f4:	35 07       	cpc	r19, r21
     9f6:	48 f0       	brcs	.+18     	; 0xa0a <__stack+0x10b>
     9f8:	4e 0f       	add	r20, r30
     9fa:	5f 1f       	adc	r21, r31
     9fc:	50 93 38 01 	sts	0x0138, r21	; 0x800138 <__brkval+0x1>
     a00:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <__brkval>
     a04:	81 93       	st	Z+, r24
     a06:	91 93       	st	Z+, r25
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
     a0a:	e0 e0       	ldi	r30, 0x00	; 0
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	cf 01       	movw	r24, r30
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	08 95       	ret

00000a1a <free>:
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	09 f4       	brne	.+2      	; 0xa24 <free+0xa>
     a22:	81 c0       	rjmp	.+258    	; 0xb26 <free+0x10c>
     a24:	fc 01       	movw	r30, r24
     a26:	32 97       	sbiw	r30, 0x02	; 2
     a28:	13 82       	std	Z+3, r1	; 0x03
     a2a:	12 82       	std	Z+2, r1	; 0x02
     a2c:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <__flp>
     a30:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <__flp+0x1>
     a34:	10 97       	sbiw	r26, 0x00	; 0
     a36:	81 f4       	brne	.+32     	; 0xa58 <free+0x3e>
     a38:	20 81       	ld	r18, Z
     a3a:	31 81       	ldd	r19, Z+1	; 0x01
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <__brkval>
     a44:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <__brkval+0x1>
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	51 f5       	brne	.+84     	; 0xaa2 <free+0x88>
     a4e:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <__brkval+0x1>
     a52:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <__brkval>
     a56:	67 c0       	rjmp	.+206    	; 0xb26 <free+0x10c>
     a58:	ed 01       	movw	r28, r26
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	ce 17       	cp	r28, r30
     a60:	df 07       	cpc	r29, r31
     a62:	40 f4       	brcc	.+16     	; 0xa74 <free+0x5a>
     a64:	4a 81       	ldd	r20, Y+2	; 0x02
     a66:	5b 81       	ldd	r21, Y+3	; 0x03
     a68:	9e 01       	movw	r18, r28
     a6a:	41 15       	cp	r20, r1
     a6c:	51 05       	cpc	r21, r1
     a6e:	f1 f0       	breq	.+60     	; 0xaac <free+0x92>
     a70:	ea 01       	movw	r28, r20
     a72:	f5 cf       	rjmp	.-22     	; 0xa5e <free+0x44>
     a74:	d3 83       	std	Z+3, r29	; 0x03
     a76:	c2 83       	std	Z+2, r28	; 0x02
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	84 0f       	add	r24, r20
     a7e:	95 1f       	adc	r25, r21
     a80:	c8 17       	cp	r28, r24
     a82:	d9 07       	cpc	r29, r25
     a84:	59 f4       	brne	.+22     	; 0xa9c <free+0x82>
     a86:	88 81       	ld	r24, Y
     a88:	99 81       	ldd	r25, Y+1	; 0x01
     a8a:	84 0f       	add	r24, r20
     a8c:	95 1f       	adc	r25, r21
     a8e:	02 96       	adiw	r24, 0x02	; 2
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	9b 81       	ldd	r25, Y+3	; 0x03
     a98:	93 83       	std	Z+3, r25	; 0x03
     a9a:	82 83       	std	Z+2, r24	; 0x02
     a9c:	21 15       	cp	r18, r1
     a9e:	31 05       	cpc	r19, r1
     aa0:	29 f4       	brne	.+10     	; 0xaac <free+0x92>
     aa2:	f0 93 3a 01 	sts	0x013A, r31	; 0x80013a <__flp+0x1>
     aa6:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <__flp>
     aaa:	3d c0       	rjmp	.+122    	; 0xb26 <free+0x10c>
     aac:	e9 01       	movw	r28, r18
     aae:	fb 83       	std	Y+3, r31	; 0x03
     ab0:	ea 83       	std	Y+2, r30	; 0x02
     ab2:	49 91       	ld	r20, Y+
     ab4:	59 91       	ld	r21, Y+
     ab6:	c4 0f       	add	r28, r20
     ab8:	d5 1f       	adc	r29, r21
     aba:	ec 17       	cp	r30, r28
     abc:	fd 07       	cpc	r31, r29
     abe:	61 f4       	brne	.+24     	; 0xad8 <free+0xbe>
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	84 0f       	add	r24, r20
     ac6:	95 1f       	adc	r25, r21
     ac8:	02 96       	adiw	r24, 0x02	; 2
     aca:	e9 01       	movw	r28, r18
     acc:	99 83       	std	Y+1, r25	; 0x01
     ace:	88 83       	st	Y, r24
     ad0:	82 81       	ldd	r24, Z+2	; 0x02
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	9b 83       	std	Y+3, r25	; 0x03
     ad6:	8a 83       	std	Y+2, r24	; 0x02
     ad8:	e0 e0       	ldi	r30, 0x00	; 0
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	8d 91       	ld	r24, X+
     ae0:	9c 91       	ld	r25, X
     ae2:	13 97       	sbiw	r26, 0x03	; 3
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	19 f0       	breq	.+6      	; 0xaee <free+0xd4>
     ae8:	fd 01       	movw	r30, r26
     aea:	dc 01       	movw	r26, r24
     aec:	f7 cf       	rjmp	.-18     	; 0xadc <free+0xc2>
     aee:	8d 91       	ld	r24, X+
     af0:	9c 91       	ld	r25, X
     af2:	11 97       	sbiw	r26, 0x01	; 1
     af4:	9d 01       	movw	r18, r26
     af6:	2e 5f       	subi	r18, 0xFE	; 254
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	82 0f       	add	r24, r18
     afc:	93 1f       	adc	r25, r19
     afe:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <__brkval>
     b02:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <__brkval+0x1>
     b06:	28 17       	cp	r18, r24
     b08:	39 07       	cpc	r19, r25
     b0a:	69 f4       	brne	.+26     	; 0xb26 <free+0x10c>
     b0c:	30 97       	sbiw	r30, 0x00	; 0
     b0e:	29 f4       	brne	.+10     	; 0xb1a <free+0x100>
     b10:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__flp+0x1>
     b14:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__flp>
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <free+0x104>
     b1a:	13 82       	std	Z+3, r1	; 0x03
     b1c:	12 82       	std	Z+2, r1	; 0x02
     b1e:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <__brkval+0x1>
     b22:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <__brkval>
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <vsnprintf>:
     b2c:	ae e0       	ldi	r26, 0x0E	; 14
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	ec e9       	ldi	r30, 0x9C	; 156
     b32:	f5 e0       	ldi	r31, 0x05	; 5
     b34:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__prologue_saves__+0x1c>
     b38:	8c 01       	movw	r16, r24
     b3a:	fa 01       	movw	r30, r20
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	8c 83       	std	Y+4, r24	; 0x04
     b40:	1a 83       	std	Y+2, r17	; 0x02
     b42:	09 83       	std	Y+1, r16	; 0x01
     b44:	77 ff       	sbrs	r23, 7
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <vsnprintf+0x20>
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e8       	ldi	r23, 0x80	; 128
     b4c:	cb 01       	movw	r24, r22
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	9e 83       	std	Y+6, r25	; 0x06
     b52:	8d 83       	std	Y+5, r24	; 0x05
     b54:	a9 01       	movw	r20, r18
     b56:	bf 01       	movw	r22, r30
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 c2 05 	call	0xb84	; 0xb84 <vfprintf>
     b60:	4d 81       	ldd	r20, Y+5	; 0x05
     b62:	5e 81       	ldd	r21, Y+6	; 0x06
     b64:	57 fd       	sbrc	r21, 7
     b66:	0a c0       	rjmp	.+20     	; 0xb7c <vsnprintf+0x50>
     b68:	2f 81       	ldd	r18, Y+7	; 0x07
     b6a:	38 85       	ldd	r19, Y+8	; 0x08
     b6c:	42 17       	cp	r20, r18
     b6e:	53 07       	cpc	r21, r19
     b70:	0c f4       	brge	.+2      	; 0xb74 <vsnprintf+0x48>
     b72:	9a 01       	movw	r18, r20
     b74:	f8 01       	movw	r30, r16
     b76:	e2 0f       	add	r30, r18
     b78:	f3 1f       	adc	r31, r19
     b7a:	10 82       	st	Z, r1
     b7c:	2e 96       	adiw	r28, 0x0e	; 14
     b7e:	e4 e0       	ldi	r30, 0x04	; 4
     b80:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__epilogue_restores__+0x1c>

00000b84 <vfprintf>:
     b84:	ab e0       	ldi	r26, 0x0B	; 11
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 ec       	ldi	r30, 0xC8	; 200
     b8a:	f5 e0       	ldi	r31, 0x05	; 5
     b8c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__prologue_saves__>
     b90:	6c 01       	movw	r12, r24
     b92:	7b 01       	movw	r14, r22
     b94:	8a 01       	movw	r16, r20
     b96:	fc 01       	movw	r30, r24
     b98:	17 82       	std	Z+7, r1	; 0x07
     b9a:	16 82       	std	Z+6, r1	; 0x06
     b9c:	83 81       	ldd	r24, Z+3	; 0x03
     b9e:	81 ff       	sbrs	r24, 1
     ba0:	cc c1       	rjmp	.+920    	; 0xf3a <vfprintf+0x3b6>
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	3c 01       	movw	r6, r24
     ba8:	f6 01       	movw	r30, r12
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	f7 01       	movw	r30, r14
     bae:	93 fd       	sbrc	r25, 3
     bb0:	85 91       	lpm	r24, Z+
     bb2:	93 ff       	sbrs	r25, 3
     bb4:	81 91       	ld	r24, Z+
     bb6:	7f 01       	movw	r14, r30
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <vfprintf+0x3a>
     bbc:	ba c1       	rjmp	.+884    	; 0xf32 <vfprintf+0x3ae>
     bbe:	85 32       	cpi	r24, 0x25	; 37
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <vfprintf+0x4c>
     bc2:	93 fd       	sbrc	r25, 3
     bc4:	85 91       	lpm	r24, Z+
     bc6:	93 ff       	sbrs	r25, 3
     bc8:	81 91       	ld	r24, Z+
     bca:	7f 01       	movw	r14, r30
     bcc:	85 32       	cpi	r24, 0x25	; 37
     bce:	29 f4       	brne	.+10     	; 0xbda <vfprintf+0x56>
     bd0:	b6 01       	movw	r22, r12
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     bd8:	e7 cf       	rjmp	.-50     	; 0xba8 <vfprintf+0x24>
     bda:	91 2c       	mov	r9, r1
     bdc:	21 2c       	mov	r2, r1
     bde:	31 2c       	mov	r3, r1
     be0:	ff e1       	ldi	r31, 0x1F	; 31
     be2:	f3 15       	cp	r31, r3
     be4:	d8 f0       	brcs	.+54     	; 0xc1c <vfprintf+0x98>
     be6:	8b 32       	cpi	r24, 0x2B	; 43
     be8:	79 f0       	breq	.+30     	; 0xc08 <vfprintf+0x84>
     bea:	38 f4       	brcc	.+14     	; 0xbfa <vfprintf+0x76>
     bec:	80 32       	cpi	r24, 0x20	; 32
     bee:	79 f0       	breq	.+30     	; 0xc0e <vfprintf+0x8a>
     bf0:	83 32       	cpi	r24, 0x23	; 35
     bf2:	a1 f4       	brne	.+40     	; 0xc1c <vfprintf+0x98>
     bf4:	23 2d       	mov	r18, r3
     bf6:	20 61       	ori	r18, 0x10	; 16
     bf8:	1d c0       	rjmp	.+58     	; 0xc34 <vfprintf+0xb0>
     bfa:	8d 32       	cpi	r24, 0x2D	; 45
     bfc:	61 f0       	breq	.+24     	; 0xc16 <vfprintf+0x92>
     bfe:	80 33       	cpi	r24, 0x30	; 48
     c00:	69 f4       	brne	.+26     	; 0xc1c <vfprintf+0x98>
     c02:	23 2d       	mov	r18, r3
     c04:	21 60       	ori	r18, 0x01	; 1
     c06:	16 c0       	rjmp	.+44     	; 0xc34 <vfprintf+0xb0>
     c08:	83 2d       	mov	r24, r3
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	38 2e       	mov	r3, r24
     c0e:	e3 2d       	mov	r30, r3
     c10:	e4 60       	ori	r30, 0x04	; 4
     c12:	3e 2e       	mov	r3, r30
     c14:	2a c0       	rjmp	.+84     	; 0xc6a <vfprintf+0xe6>
     c16:	f3 2d       	mov	r31, r3
     c18:	f8 60       	ori	r31, 0x08	; 8
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <vfprintf+0xd2>
     c1c:	37 fc       	sbrc	r3, 7
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <vfprintf+0xf6>
     c20:	20 ed       	ldi	r18, 0xD0	; 208
     c22:	28 0f       	add	r18, r24
     c24:	2a 30       	cpi	r18, 0x0A	; 10
     c26:	40 f0       	brcs	.+16     	; 0xc38 <vfprintf+0xb4>
     c28:	8e 32       	cpi	r24, 0x2E	; 46
     c2a:	b9 f4       	brne	.+46     	; 0xc5a <vfprintf+0xd6>
     c2c:	36 fc       	sbrc	r3, 6
     c2e:	81 c1       	rjmp	.+770    	; 0xf32 <vfprintf+0x3ae>
     c30:	23 2d       	mov	r18, r3
     c32:	20 64       	ori	r18, 0x40	; 64
     c34:	32 2e       	mov	r3, r18
     c36:	19 c0       	rjmp	.+50     	; 0xc6a <vfprintf+0xe6>
     c38:	36 fe       	sbrs	r3, 6
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0xc4>
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	98 9e       	mul	r9, r24
     c40:	20 0d       	add	r18, r0
     c42:	11 24       	eor	r1, r1
     c44:	92 2e       	mov	r9, r18
     c46:	11 c0       	rjmp	.+34     	; 0xc6a <vfprintf+0xe6>
     c48:	ea e0       	ldi	r30, 0x0A	; 10
     c4a:	2e 9e       	mul	r2, r30
     c4c:	20 0d       	add	r18, r0
     c4e:	11 24       	eor	r1, r1
     c50:	22 2e       	mov	r2, r18
     c52:	f3 2d       	mov	r31, r3
     c54:	f0 62       	ori	r31, 0x20	; 32
     c56:	3f 2e       	mov	r3, r31
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <vfprintf+0xe6>
     c5a:	8c 36       	cpi	r24, 0x6C	; 108
     c5c:	21 f4       	brne	.+8      	; 0xc66 <vfprintf+0xe2>
     c5e:	83 2d       	mov	r24, r3
     c60:	80 68       	ori	r24, 0x80	; 128
     c62:	38 2e       	mov	r3, r24
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0xe6>
     c66:	88 36       	cpi	r24, 0x68	; 104
     c68:	41 f4       	brne	.+16     	; 0xc7a <vfprintf+0xf6>
     c6a:	f7 01       	movw	r30, r14
     c6c:	93 fd       	sbrc	r25, 3
     c6e:	85 91       	lpm	r24, Z+
     c70:	93 ff       	sbrs	r25, 3
     c72:	81 91       	ld	r24, Z+
     c74:	7f 01       	movw	r14, r30
     c76:	81 11       	cpse	r24, r1
     c78:	b3 cf       	rjmp	.-154    	; 0xbe0 <vfprintf+0x5c>
     c7a:	98 2f       	mov	r25, r24
     c7c:	9f 7d       	andi	r25, 0xDF	; 223
     c7e:	95 54       	subi	r25, 0x45	; 69
     c80:	93 30       	cpi	r25, 0x03	; 3
     c82:	28 f4       	brcc	.+10     	; 0xc8e <vfprintf+0x10a>
     c84:	0c 5f       	subi	r16, 0xFC	; 252
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	9f e3       	ldi	r25, 0x3F	; 63
     c8a:	99 83       	std	Y+1, r25	; 0x01
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <vfprintf+0x124>
     c8e:	83 36       	cpi	r24, 0x63	; 99
     c90:	31 f0       	breq	.+12     	; 0xc9e <vfprintf+0x11a>
     c92:	83 37       	cpi	r24, 0x73	; 115
     c94:	71 f0       	breq	.+28     	; 0xcb2 <vfprintf+0x12e>
     c96:	83 35       	cpi	r24, 0x53	; 83
     c98:	09 f0       	breq	.+2      	; 0xc9c <vfprintf+0x118>
     c9a:	59 c0       	rjmp	.+178    	; 0xd4e <vfprintf+0x1ca>
     c9c:	21 c0       	rjmp	.+66     	; 0xce0 <vfprintf+0x15c>
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 81       	ld	r24, Z
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	0e 5f       	subi	r16, 0xFE	; 254
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	88 24       	eor	r8, r8
     caa:	83 94       	inc	r8
     cac:	91 2c       	mov	r9, r1
     cae:	53 01       	movw	r10, r6
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <vfprintf+0x154>
     cb2:	28 01       	movw	r4, r16
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	4f 0e       	add	r4, r31
     cb8:	51 1c       	adc	r5, r1
     cba:	f8 01       	movw	r30, r16
     cbc:	a0 80       	ld	r10, Z
     cbe:	b1 80       	ldd	r11, Z+1	; 0x01
     cc0:	36 fe       	sbrs	r3, 6
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <vfprintf+0x146>
     cc4:	69 2d       	mov	r22, r9
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x14a>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f ef       	ldi	r23, 0xFF	; 255
     cce:	c5 01       	movw	r24, r10
     cd0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <strnlen>
     cd4:	4c 01       	movw	r8, r24
     cd6:	82 01       	movw	r16, r4
     cd8:	f3 2d       	mov	r31, r3
     cda:	ff 77       	andi	r31, 0x7F	; 127
     cdc:	3f 2e       	mov	r3, r31
     cde:	16 c0       	rjmp	.+44     	; 0xd0c <vfprintf+0x188>
     ce0:	28 01       	movw	r4, r16
     ce2:	22 e0       	ldi	r18, 0x02	; 2
     ce4:	42 0e       	add	r4, r18
     ce6:	51 1c       	adc	r5, r1
     ce8:	f8 01       	movw	r30, r16
     cea:	a0 80       	ld	r10, Z
     cec:	b1 80       	ldd	r11, Z+1	; 0x01
     cee:	36 fe       	sbrs	r3, 6
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <vfprintf+0x174>
     cf2:	69 2d       	mov	r22, r9
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x178>
     cf8:	6f ef       	ldi	r22, 0xFF	; 255
     cfa:	7f ef       	ldi	r23, 0xFF	; 255
     cfc:	c5 01       	movw	r24, r10
     cfe:	0e 94 a3 07 	call	0xf46	; 0xf46 <strnlen_P>
     d02:	4c 01       	movw	r8, r24
     d04:	f3 2d       	mov	r31, r3
     d06:	f0 68       	ori	r31, 0x80	; 128
     d08:	3f 2e       	mov	r3, r31
     d0a:	82 01       	movw	r16, r4
     d0c:	33 fc       	sbrc	r3, 3
     d0e:	1b c0       	rjmp	.+54     	; 0xd46 <vfprintf+0x1c2>
     d10:	82 2d       	mov	r24, r2
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	88 16       	cp	r8, r24
     d16:	99 06       	cpc	r9, r25
     d18:	b0 f4       	brcc	.+44     	; 0xd46 <vfprintf+0x1c2>
     d1a:	b6 01       	movw	r22, r12
     d1c:	80 e2       	ldi	r24, 0x20	; 32
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     d24:	2a 94       	dec	r2
     d26:	f4 cf       	rjmp	.-24     	; 0xd10 <vfprintf+0x18c>
     d28:	f5 01       	movw	r30, r10
     d2a:	37 fc       	sbrc	r3, 7
     d2c:	85 91       	lpm	r24, Z+
     d2e:	37 fe       	sbrs	r3, 7
     d30:	81 91       	ld	r24, Z+
     d32:	5f 01       	movw	r10, r30
     d34:	b6 01       	movw	r22, r12
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     d3c:	21 10       	cpse	r2, r1
     d3e:	2a 94       	dec	r2
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	82 1a       	sub	r8, r18
     d44:	91 08       	sbc	r9, r1
     d46:	81 14       	cp	r8, r1
     d48:	91 04       	cpc	r9, r1
     d4a:	71 f7       	brne	.-36     	; 0xd28 <vfprintf+0x1a4>
     d4c:	e8 c0       	rjmp	.+464    	; 0xf1e <vfprintf+0x39a>
     d4e:	84 36       	cpi	r24, 0x64	; 100
     d50:	11 f0       	breq	.+4      	; 0xd56 <vfprintf+0x1d2>
     d52:	89 36       	cpi	r24, 0x69	; 105
     d54:	41 f5       	brne	.+80     	; 0xda6 <vfprintf+0x222>
     d56:	f8 01       	movw	r30, r16
     d58:	37 fe       	sbrs	r3, 7
     d5a:	07 c0       	rjmp	.+14     	; 0xd6a <vfprintf+0x1e6>
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	0c 5f       	subi	r16, 0xFC	; 252
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0x1f6>
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	07 2e       	mov	r0, r23
     d70:	00 0c       	add	r0, r0
     d72:	88 0b       	sbc	r24, r24
     d74:	99 0b       	sbc	r25, r25
     d76:	0e 5f       	subi	r16, 0xFE	; 254
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	f3 2d       	mov	r31, r3
     d7c:	ff 76       	andi	r31, 0x6F	; 111
     d7e:	3f 2e       	mov	r3, r31
     d80:	97 ff       	sbrs	r25, 7
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <vfprintf+0x212>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	f0 68       	ori	r31, 0x80	; 128
     d94:	3f 2e       	mov	r3, r31
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	a3 01       	movw	r20, r6
     d9c:	0e 94 f5 07 	call	0xfea	; 0xfea <__ultoa_invert>
     da0:	88 2e       	mov	r8, r24
     da2:	86 18       	sub	r8, r6
     da4:	45 c0       	rjmp	.+138    	; 0xe30 <vfprintf+0x2ac>
     da6:	85 37       	cpi	r24, 0x75	; 117
     da8:	31 f4       	brne	.+12     	; 0xdb6 <vfprintf+0x232>
     daa:	23 2d       	mov	r18, r3
     dac:	2f 7e       	andi	r18, 0xEF	; 239
     dae:	b2 2e       	mov	r11, r18
     db0:	2a e0       	ldi	r18, 0x0A	; 10
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	25 c0       	rjmp	.+74     	; 0xe00 <vfprintf+0x27c>
     db6:	93 2d       	mov	r25, r3
     db8:	99 7f       	andi	r25, 0xF9	; 249
     dba:	b9 2e       	mov	r11, r25
     dbc:	8f 36       	cpi	r24, 0x6F	; 111
     dbe:	c1 f0       	breq	.+48     	; 0xdf0 <vfprintf+0x26c>
     dc0:	18 f4       	brcc	.+6      	; 0xdc8 <vfprintf+0x244>
     dc2:	88 35       	cpi	r24, 0x58	; 88
     dc4:	79 f0       	breq	.+30     	; 0xde4 <vfprintf+0x260>
     dc6:	b5 c0       	rjmp	.+362    	; 0xf32 <vfprintf+0x3ae>
     dc8:	80 37       	cpi	r24, 0x70	; 112
     dca:	19 f0       	breq	.+6      	; 0xdd2 <vfprintf+0x24e>
     dcc:	88 37       	cpi	r24, 0x78	; 120
     dce:	21 f0       	breq	.+8      	; 0xdd8 <vfprintf+0x254>
     dd0:	b0 c0       	rjmp	.+352    	; 0xf32 <vfprintf+0x3ae>
     dd2:	e9 2f       	mov	r30, r25
     dd4:	e0 61       	ori	r30, 0x10	; 16
     dd6:	be 2e       	mov	r11, r30
     dd8:	b4 fe       	sbrs	r11, 4
     dda:	0d c0       	rjmp	.+26     	; 0xdf6 <vfprintf+0x272>
     ddc:	fb 2d       	mov	r31, r11
     dde:	f4 60       	ori	r31, 0x04	; 4
     de0:	bf 2e       	mov	r11, r31
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x272>
     de4:	34 fe       	sbrs	r3, 4
     de6:	0a c0       	rjmp	.+20     	; 0xdfc <vfprintf+0x278>
     de8:	29 2f       	mov	r18, r25
     dea:	26 60       	ori	r18, 0x06	; 6
     dec:	b2 2e       	mov	r11, r18
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x278>
     df0:	28 e0       	ldi	r18, 0x08	; 8
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <vfprintf+0x27c>
     df6:	20 e1       	ldi	r18, 0x10	; 16
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x27c>
     dfc:	20 e1       	ldi	r18, 0x10	; 16
     dfe:	32 e0       	ldi	r19, 0x02	; 2
     e00:	f8 01       	movw	r30, r16
     e02:	b7 fe       	sbrs	r11, 7
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <vfprintf+0x290>
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	0c 5f       	subi	r16, 0xFC	; 252
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x29c>
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 5f       	subi	r16, 0xFE	; 254
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
     e20:	a3 01       	movw	r20, r6
     e22:	0e 94 f5 07 	call	0xfea	; 0xfea <__ultoa_invert>
     e26:	88 2e       	mov	r8, r24
     e28:	86 18       	sub	r8, r6
     e2a:	fb 2d       	mov	r31, r11
     e2c:	ff 77       	andi	r31, 0x7F	; 127
     e2e:	3f 2e       	mov	r3, r31
     e30:	36 fe       	sbrs	r3, 6
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <vfprintf+0x2ca>
     e34:	23 2d       	mov	r18, r3
     e36:	2e 7f       	andi	r18, 0xFE	; 254
     e38:	a2 2e       	mov	r10, r18
     e3a:	89 14       	cp	r8, r9
     e3c:	58 f4       	brcc	.+22     	; 0xe54 <vfprintf+0x2d0>
     e3e:	34 fe       	sbrs	r3, 4
     e40:	0b c0       	rjmp	.+22     	; 0xe58 <vfprintf+0x2d4>
     e42:	32 fc       	sbrc	r3, 2
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <vfprintf+0x2d4>
     e46:	83 2d       	mov	r24, r3
     e48:	8e 7e       	andi	r24, 0xEE	; 238
     e4a:	a8 2e       	mov	r10, r24
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <vfprintf+0x2d4>
     e4e:	b8 2c       	mov	r11, r8
     e50:	a3 2c       	mov	r10, r3
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x2d6>
     e54:	b8 2c       	mov	r11, r8
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x2d6>
     e58:	b9 2c       	mov	r11, r9
     e5a:	a4 fe       	sbrs	r10, 4
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <vfprintf+0x2f8>
     e5e:	fe 01       	movw	r30, r28
     e60:	e8 0d       	add	r30, r8
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	80 33       	cpi	r24, 0x30	; 48
     e68:	21 f4       	brne	.+8      	; 0xe72 <vfprintf+0x2ee>
     e6a:	9a 2d       	mov	r25, r10
     e6c:	99 7e       	andi	r25, 0xE9	; 233
     e6e:	a9 2e       	mov	r10, r25
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <vfprintf+0x300>
     e72:	a2 fe       	sbrs	r10, 2
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <vfprintf+0x2fe>
     e76:	b3 94       	inc	r11
     e78:	b3 94       	inc	r11
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <vfprintf+0x300>
     e7c:	8a 2d       	mov	r24, r10
     e7e:	86 78       	andi	r24, 0x86	; 134
     e80:	09 f0       	breq	.+2      	; 0xe84 <vfprintf+0x300>
     e82:	b3 94       	inc	r11
     e84:	a3 fc       	sbrc	r10, 3
     e86:	11 c0       	rjmp	.+34     	; 0xeaa <vfprintf+0x326>
     e88:	a0 fe       	sbrs	r10, 0
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <vfprintf+0x314>
     e8c:	b2 14       	cp	r11, r2
     e8e:	88 f4       	brcc	.+34     	; 0xeb2 <vfprintf+0x32e>
     e90:	28 0c       	add	r2, r8
     e92:	92 2c       	mov	r9, r2
     e94:	9b 18       	sub	r9, r11
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <vfprintf+0x330>
     e98:	b2 14       	cp	r11, r2
     e9a:	60 f4       	brcc	.+24     	; 0xeb4 <vfprintf+0x330>
     e9c:	b6 01       	movw	r22, r12
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     ea6:	b3 94       	inc	r11
     ea8:	f7 cf       	rjmp	.-18     	; 0xe98 <vfprintf+0x314>
     eaa:	b2 14       	cp	r11, r2
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <vfprintf+0x330>
     eae:	2b 18       	sub	r2, r11
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <vfprintf+0x332>
     eb2:	98 2c       	mov	r9, r8
     eb4:	21 2c       	mov	r2, r1
     eb6:	a4 fe       	sbrs	r10, 4
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <vfprintf+0x356>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     ec4:	a2 fe       	sbrs	r10, 2
     ec6:	17 c0       	rjmp	.+46     	; 0xef6 <vfprintf+0x372>
     ec8:	a1 fc       	sbrc	r10, 1
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <vfprintf+0x34e>
     ecc:	88 e7       	ldi	r24, 0x78	; 120
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x352>
     ed2:	88 e5       	ldi	r24, 0x58	; 88
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	b6 01       	movw	r22, r12
     ed8:	0c c0       	rjmp	.+24     	; 0xef2 <vfprintf+0x36e>
     eda:	8a 2d       	mov	r24, r10
     edc:	86 78       	andi	r24, 0x86	; 134
     ede:	59 f0       	breq	.+22     	; 0xef6 <vfprintf+0x372>
     ee0:	a1 fe       	sbrs	r10, 1
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <vfprintf+0x364>
     ee4:	8b e2       	ldi	r24, 0x2B	; 43
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <vfprintf+0x366>
     ee8:	80 e2       	ldi	r24, 0x20	; 32
     eea:	a7 fc       	sbrc	r10, 7
     eec:	8d e2       	ldi	r24, 0x2D	; 45
     eee:	b6 01       	movw	r22, r12
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     ef6:	89 14       	cp	r8, r9
     ef8:	38 f4       	brcc	.+14     	; 0xf08 <vfprintf+0x384>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     f04:	9a 94       	dec	r9
     f06:	f7 cf       	rjmp	.-18     	; 0xef6 <vfprintf+0x372>
     f08:	8a 94       	dec	r8
     f0a:	f3 01       	movw	r30, r6
     f0c:	e8 0d       	add	r30, r8
     f0e:	f1 1d       	adc	r31, r1
     f10:	80 81       	ld	r24, Z
     f12:	b6 01       	movw	r22, r12
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     f1a:	81 10       	cpse	r8, r1
     f1c:	f5 cf       	rjmp	.-22     	; 0xf08 <vfprintf+0x384>
     f1e:	22 20       	and	r2, r2
     f20:	09 f4       	brne	.+2      	; 0xf24 <vfprintf+0x3a0>
     f22:	42 ce       	rjmp	.-892    	; 0xba8 <vfprintf+0x24>
     f24:	b6 01       	movw	r22, r12
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 b9 07 	call	0xf72	; 0xf72 <fputc>
     f2e:	2a 94       	dec	r2
     f30:	f6 cf       	rjmp	.-20     	; 0xf1e <vfprintf+0x39a>
     f32:	f6 01       	movw	r30, r12
     f34:	86 81       	ldd	r24, Z+6	; 0x06
     f36:	97 81       	ldd	r25, Z+7	; 0x07
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x3ba>
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	9f ef       	ldi	r25, 0xFF	; 255
     f3e:	2b 96       	adiw	r28, 0x0b	; 11
     f40:	e2 e1       	ldi	r30, 0x12	; 18
     f42:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__epilogue_restores__>

00000f46 <strnlen_P>:
     f46:	fc 01       	movw	r30, r24
     f48:	05 90       	lpm	r0, Z+
     f4a:	61 50       	subi	r22, 0x01	; 1
     f4c:	70 40       	sbci	r23, 0x00	; 0
     f4e:	01 10       	cpse	r0, r1
     f50:	d8 f7       	brcc	.-10     	; 0xf48 <strnlen_P+0x2>
     f52:	80 95       	com	r24
     f54:	90 95       	com	r25
     f56:	8e 0f       	add	r24, r30
     f58:	9f 1f       	adc	r25, r31
     f5a:	08 95       	ret

00000f5c <strnlen>:
     f5c:	fc 01       	movw	r30, r24
     f5e:	61 50       	subi	r22, 0x01	; 1
     f60:	70 40       	sbci	r23, 0x00	; 0
     f62:	01 90       	ld	r0, Z+
     f64:	01 10       	cpse	r0, r1
     f66:	d8 f7       	brcc	.-10     	; 0xf5e <strnlen+0x2>
     f68:	80 95       	com	r24
     f6a:	90 95       	com	r25
     f6c:	8e 0f       	add	r24, r30
     f6e:	9f 1f       	adc	r25, r31
     f70:	08 95       	ret

00000f72 <fputc>:
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	fb 01       	movw	r30, r22
     f7c:	23 81       	ldd	r18, Z+3	; 0x03
     f7e:	21 fd       	sbrc	r18, 1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <fputc+0x16>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	2c c0       	rjmp	.+88     	; 0xfe0 <fputc+0x6e>
     f88:	22 ff       	sbrs	r18, 2
     f8a:	16 c0       	rjmp	.+44     	; 0xfb8 <fputc+0x46>
     f8c:	46 81       	ldd	r20, Z+6	; 0x06
     f8e:	57 81       	ldd	r21, Z+7	; 0x07
     f90:	24 81       	ldd	r18, Z+4	; 0x04
     f92:	35 81       	ldd	r19, Z+5	; 0x05
     f94:	42 17       	cp	r20, r18
     f96:	53 07       	cpc	r21, r19
     f98:	44 f4       	brge	.+16     	; 0xfaa <fputc+0x38>
     f9a:	a0 81       	ld	r26, Z
     f9c:	b1 81       	ldd	r27, Z+1	; 0x01
     f9e:	9d 01       	movw	r18, r26
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	31 83       	std	Z+1, r19	; 0x01
     fa6:	20 83       	st	Z, r18
     fa8:	8c 93       	st	X, r24
     faa:	26 81       	ldd	r18, Z+6	; 0x06
     fac:	37 81       	ldd	r19, Z+7	; 0x07
     fae:	2f 5f       	subi	r18, 0xFF	; 255
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	37 83       	std	Z+7, r19	; 0x07
     fb4:	26 83       	std	Z+6, r18	; 0x06
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <fputc+0x6e>
     fb8:	8b 01       	movw	r16, r22
     fba:	ec 01       	movw	r28, r24
     fbc:	fb 01       	movw	r30, r22
     fbe:	00 84       	ldd	r0, Z+8	; 0x08
     fc0:	f1 85       	ldd	r31, Z+9	; 0x09
     fc2:	e0 2d       	mov	r30, r0
     fc4:	09 95       	icall
     fc6:	89 2b       	or	r24, r25
     fc8:	e1 f6       	brne	.-72     	; 0xf82 <fputc+0x10>
     fca:	d8 01       	movw	r26, r16
     fcc:	16 96       	adiw	r26, 0x06	; 6
     fce:	8d 91       	ld	r24, X+
     fd0:	9c 91       	ld	r25, X
     fd2:	17 97       	sbiw	r26, 0x07	; 7
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	17 96       	adiw	r26, 0x07	; 7
     fd8:	9c 93       	st	X, r25
     fda:	8e 93       	st	-X, r24
     fdc:	16 97       	sbiw	r26, 0x06	; 6
     fde:	ce 01       	movw	r24, r28
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <__ultoa_invert>:
     fea:	fa 01       	movw	r30, r20
     fec:	aa 27       	eor	r26, r26
     fee:	28 30       	cpi	r18, 0x08	; 8
     ff0:	51 f1       	breq	.+84     	; 0x1046 <__ultoa_invert+0x5c>
     ff2:	20 31       	cpi	r18, 0x10	; 16
     ff4:	81 f1       	breq	.+96     	; 0x1056 <__ultoa_invert+0x6c>
     ff6:	e8 94       	clt
     ff8:	6f 93       	push	r22
     ffa:	6e 7f       	andi	r22, 0xFE	; 254
     ffc:	6e 5f       	subi	r22, 0xFE	; 254
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	af 4f       	sbci	r26, 0xFF	; 255
    1006:	b1 e0       	ldi	r27, 0x01	; 1
    1008:	3e d0       	rcall	.+124    	; 0x1086 <__ultoa_invert+0x9c>
    100a:	b4 e0       	ldi	r27, 0x04	; 4
    100c:	3c d0       	rcall	.+120    	; 0x1086 <__ultoa_invert+0x9c>
    100e:	67 0f       	add	r22, r23
    1010:	78 1f       	adc	r23, r24
    1012:	89 1f       	adc	r24, r25
    1014:	9a 1f       	adc	r25, r26
    1016:	a1 1d       	adc	r26, r1
    1018:	68 0f       	add	r22, r24
    101a:	79 1f       	adc	r23, r25
    101c:	8a 1f       	adc	r24, r26
    101e:	91 1d       	adc	r25, r1
    1020:	a1 1d       	adc	r26, r1
    1022:	6a 0f       	add	r22, r26
    1024:	71 1d       	adc	r23, r1
    1026:	81 1d       	adc	r24, r1
    1028:	91 1d       	adc	r25, r1
    102a:	a1 1d       	adc	r26, r1
    102c:	20 d0       	rcall	.+64     	; 0x106e <__ultoa_invert+0x84>
    102e:	09 f4       	brne	.+2      	; 0x1032 <__ultoa_invert+0x48>
    1030:	68 94       	set
    1032:	3f 91       	pop	r19
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	26 9f       	mul	r18, r22
    1038:	11 24       	eor	r1, r1
    103a:	30 19       	sub	r19, r0
    103c:	30 5d       	subi	r19, 0xD0	; 208
    103e:	31 93       	st	Z+, r19
    1040:	de f6       	brtc	.-74     	; 0xff8 <__ultoa_invert+0xe>
    1042:	cf 01       	movw	r24, r30
    1044:	08 95       	ret
    1046:	46 2f       	mov	r20, r22
    1048:	47 70       	andi	r20, 0x07	; 7
    104a:	40 5d       	subi	r20, 0xD0	; 208
    104c:	41 93       	st	Z+, r20
    104e:	b3 e0       	ldi	r27, 0x03	; 3
    1050:	0f d0       	rcall	.+30     	; 0x1070 <__ultoa_invert+0x86>
    1052:	c9 f7       	brne	.-14     	; 0x1046 <__ultoa_invert+0x5c>
    1054:	f6 cf       	rjmp	.-20     	; 0x1042 <__ultoa_invert+0x58>
    1056:	46 2f       	mov	r20, r22
    1058:	4f 70       	andi	r20, 0x0F	; 15
    105a:	40 5d       	subi	r20, 0xD0	; 208
    105c:	4a 33       	cpi	r20, 0x3A	; 58
    105e:	18 f0       	brcs	.+6      	; 0x1066 <__ultoa_invert+0x7c>
    1060:	49 5d       	subi	r20, 0xD9	; 217
    1062:	31 fd       	sbrc	r19, 1
    1064:	40 52       	subi	r20, 0x20	; 32
    1066:	41 93       	st	Z+, r20
    1068:	02 d0       	rcall	.+4      	; 0x106e <__ultoa_invert+0x84>
    106a:	a9 f7       	brne	.-22     	; 0x1056 <__ultoa_invert+0x6c>
    106c:	ea cf       	rjmp	.-44     	; 0x1042 <__ultoa_invert+0x58>
    106e:	b4 e0       	ldi	r27, 0x04	; 4
    1070:	a6 95       	lsr	r26
    1072:	97 95       	ror	r25
    1074:	87 95       	ror	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	ba 95       	dec	r27
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__ultoa_invert+0x86>
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	61 05       	cpc	r22, r1
    1082:	71 05       	cpc	r23, r1
    1084:	08 95       	ret
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
    108a:	0a 2e       	mov	r0, r26
    108c:	06 94       	lsr	r0
    108e:	57 95       	ror	r21
    1090:	47 95       	ror	r20
    1092:	37 95       	ror	r19
    1094:	27 95       	ror	r18
    1096:	ba 95       	dec	r27
    1098:	c9 f7       	brne	.-14     	; 0x108c <__ultoa_invert+0xa2>
    109a:	62 0f       	add	r22, r18
    109c:	73 1f       	adc	r23, r19
    109e:	84 1f       	adc	r24, r20
    10a0:	95 1f       	adc	r25, r21
    10a2:	a0 1d       	adc	r26, r0
    10a4:	08 95       	ret

000010a6 <__prologue_saves__>:
    10a6:	2f 92       	push	r2
    10a8:	3f 92       	push	r3
    10aa:	4f 92       	push	r4
    10ac:	5f 92       	push	r5
    10ae:	6f 92       	push	r6
    10b0:	7f 92       	push	r7
    10b2:	8f 92       	push	r8
    10b4:	9f 92       	push	r9
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	ca 1b       	sub	r28, r26
    10d0:	db 0b       	sbc	r29, r27
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	09 94       	ijmp

000010de <__epilogue_restores__>:
    10de:	2a 88       	ldd	r2, Y+18	; 0x12
    10e0:	39 88       	ldd	r3, Y+17	; 0x11
    10e2:	48 88       	ldd	r4, Y+16	; 0x10
    10e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    10e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    10e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    10ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    10f0:	b9 84       	ldd	r11, Y+9	; 0x09
    10f2:	c8 84       	ldd	r12, Y+8	; 0x08
    10f4:	df 80       	ldd	r13, Y+7	; 0x07
    10f6:	ee 80       	ldd	r14, Y+6	; 0x06
    10f8:	fd 80       	ldd	r15, Y+5	; 0x05
    10fa:	0c 81       	ldd	r16, Y+4	; 0x04
    10fc:	1b 81       	ldd	r17, Y+3	; 0x03
    10fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1100:	b9 81       	ldd	r27, Y+1	; 0x01
    1102:	ce 0f       	add	r28, r30
    1104:	d1 1d       	adc	r29, r1
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	ed 01       	movw	r28, r26
    1112:	08 95       	ret

00001114 <_exit>:
    1114:	f8 94       	cli

00001116 <__stop_program>:
    1116:	ff cf       	rjmp	.-2      	; 0x1116 <__stop_program>
