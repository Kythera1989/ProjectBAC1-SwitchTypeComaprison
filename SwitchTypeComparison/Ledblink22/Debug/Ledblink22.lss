
Ledblink22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000e60  00000ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080011a  0080011a  00000f0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fc  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df7  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b36  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000041d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085e  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00004d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005add  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_18>
  4c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_19>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 31       	cpi	r26, 0x1A	; 26
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e1       	ldi	r26, 0x1A	; 26
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 32       	cpi	r26, 0x22	; 34
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c8 02 	call	0x590	; 0x590 <main>
  ea:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <getPinAndPort>:
static volatile uint8_t* const DATA_DIRECTION_REGISTERS[] = { &DDRB, &DDRC, &DDRD, &DDRE }; // global array for Data Registers
static volatile uint8_t* const PORT_REGISTERS[] = { &PORTB, &PORTC, &PORTD, &PORTE }; //global array for Port Registers
static volatile uint8_t* const PIN_REGISTERS[] = { &PINB, &PINC, &PIND, &PINE }; ////global array for Pin Registers

void getPinAndPort(uint8_t* pin, uint8_t* port)
{
  f2:	fc 01       	movw	r30, r24
    uint8_t pinsOnPort = 8;
    *port = *pin / pinsOnPort; //Calculation of the Pin and Port
  f4:	80 81       	ld	r24, Z
  f6:	86 95       	lsr	r24
  f8:	86 95       	lsr	r24
  fa:	86 95       	lsr	r24
  fc:	db 01       	movw	r26, r22
  fe:	8c 93       	st	X, r24
    *pin = *pin % pinsOnPort;
 100:	80 81       	ld	r24, Z
 102:	87 70       	andi	r24, 0x07	; 7
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <pinMode>:
}

void pinMode(uint8_t pin, Mode mode)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <pinMode+0xa>
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	16 2f       	mov	r17, r22
    uint8_t portNumber;
    uint8_t pinNumber = pin;
 118:	8a 83       	std	Y+2, r24	; 0x02
    getPinAndPort(&pinNumber, &portNumber);
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	ce 01       	movw	r24, r28
 122:	02 96       	adiw	r24, 0x02	; 2
 124:	0e 94 79 00 	call	0xf2	; 0xf2 <getPinAndPort>

    if (mode == OUTPUT) {
 128:	11 30       	cpi	r17, 0x01	; 1
 12a:	c1 f4       	brne	.+48     	; 0x15c <pinMode+0x54>
        BIT_SET(*DATA_DIRECTION_REGISTERS[portNumber], pinNumber);
 12c:	e9 81       	ldd	r30, Y+1	; 0x01
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ea 5f       	subi	r30, 0xFA	; 250
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	01 90       	ld	r0, Z+
 13a:	f0 81       	ld	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	a0 81       	ld	r26, Z
 140:	0a 81       	ldd	r16, Y+2	; 0x02
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 00 03 	call	0x600	; 0x600 <__ashldi3>
 156:	2a 2b       	or	r18, r26
 158:	20 83       	st	Z, r18
 15a:	19 c0       	rjmp	.+50     	; 0x18e <pinMode+0x86>
    } else if (mode == INPUT) {
 15c:	11 11       	cpse	r17, r1
 15e:	17 c0       	rjmp	.+46     	; 0x18e <pinMode+0x86>
        BIT_CLR(*DATA_DIRECTION_REGISTERS[portNumber], pinNumber);
 160:	e9 81       	ldd	r30, Y+1	; 0x01
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ea 5f       	subi	r30, 0xFA	; 250
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	a0 81       	ld	r26, Z
 16e:	b1 81       	ldd	r27, Z+1	; 0x01
 170:	ec 91       	ld	r30, X
 172:	0a 81       	ldd	r16, Y+2	; 0x02
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 00 03 	call	0x600	; 0x600 <__ashldi3>
 188:	20 95       	com	r18
 18a:	e2 23       	and	r30, r18
 18c:	ec 93       	st	X, r30
    }
}
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <usartStringWrite>:
    } else {
        return 0;
    }
    usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <usartStringWrite+0x14>
 1ae:	cf 5f       	subi	r28, 0xFF	; 255
 1b0:	f7 01       	movw	r30, r14
 1b2:	ec 0f       	add	r30, r28
 1b4:	f1 1d       	adc	r31, r1
 1b6:	80 81       	ld	r24, Z
 1b8:	81 11       	cpse	r24, r1
 1ba:	f9 cf       	rjmp	.-14     	; 0x1ae <usartStringWrite+0x12>
 1bc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <usartAvailableForWrite>
 1c0:	8c 17       	cp	r24, r28
 1c2:	68 f4       	brcc	.+26     	; 0x1de <usartStringWrite+0x42>
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <usartStringWrite+0x52>
 1c8:	f7 01       	movw	r30, r14
 1ca:	e0 0f       	add	r30, r16
 1cc:	f1 1f       	adc	r31, r17
 1ce:	80 81       	ld	r24, Z
 1d0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usartWrite>
 1d4:	81 11       	cpse	r24, r1
 1d6:	df 5f       	subi	r29, 0xFF	; 255
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <usartStringWrite+0x48>
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	8c 2f       	mov	r24, r28
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 17       	cp	r16, r24
 1ea:	19 07       	cpc	r17, r25
 1ec:	6c f3       	brlt	.-38     	; 0x1c8 <usartStringWrite+0x2c>
 1ee:	0e 94 b1 02 	call	0x562	; 0x562 <usartFlush>
 1f2:	8d 2f       	mov	r24, r29
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	08 95       	ret

00000202 <usartStringPrintln>:
uint8_t usartStringPrintln(const char* format, ...) //function is nearly the same like usartTringPrint
{
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	0b 85       	ldd	r16, Y+11	; 0x0b
 218:	1c 85       	ldd	r17, Y+12	; 0x0c
    } else {
        return 0;
    }
    //usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
 21a:	cd b6       	in	r12, 0x3d	; 61
 21c:	de b6       	in	r13, 0x3e	; 62
uint8_t usartStringPrintln(const char* format, ...) //function is nearly the same like usartTringPrint
{
    uint8_t cnt = 0;
    uint8_t newlineBacklashAdd = 2; //need to append 2 characters /r/n
    va_list args;
    char buffer[usartAvailableForWrite()]; //make a buffer for the string from va_list
 21e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <usartAvailableForWrite>
 222:	2d b7       	in	r18, 0x3d	; 61
 224:	3e b7       	in	r19, 0x3e	; 62
 226:	28 1b       	sub	r18, r24
 228:	31 09       	sbc	r19, r1
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	3e bf       	out	0x3e, r19	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	2d bf       	out	0x3d, r18	; 61
 234:	8d b7       	in	r24, 0x3d	; 61
 236:	9e b7       	in	r25, 0x3e	; 62
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	7c 01       	movw	r14, r24
    if (usartAvailableForWrite() >= (strlen(format) + newlineBacklashAdd)) { //check if ringbuffer size is big enough for the string +2 for \r\n
 23c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <usartAvailableForWrite>
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	f8 01       	movw	r30, r16
 244:	01 90       	ld	r0, Z+
 246:	00 20       	and	r0, r0
 248:	e9 f7       	brne	.-6      	; 0x244 <usartStringPrintln+0x42>
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	e0 1b       	sub	r30, r16
 24e:	f1 0b       	sbc	r31, r17
 250:	32 96       	adiw	r30, 0x02	; 2
 252:	8e 17       	cp	r24, r30
 254:	9f 07       	cpc	r25, r31
 256:	c0 f0       	brcs	.+48     	; 0x288 <usartStringPrintln+0x86>
        va_start(args, format);
        cnt = vsnprintf(buffer, usartAvailableForWrite(), format, args); //got this from https://www.educative.io/answers/what-is-vsnprintf-in-c
 258:	0e 94 5e 02 	call	0x4bc	; 0x4bc <usartAvailableForWrite>
 25c:	68 2f       	mov	r22, r24
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	9e 01       	movw	r18, r28
 262:	23 5f       	subi	r18, 0xF3	; 243
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	a8 01       	movw	r20, r16
 268:	c7 01       	movw	r24, r14
 26a:	0e 94 3a 04 	call	0x874	; 0x874 <vsnprintf>
 26e:	18 2f       	mov	r17, r24
        usartStringWrite(buffer);
 270:	c7 01       	movw	r24, r14
 272:	0e 94 ce 00 	call	0x19c	; 0x19c <usartStringWrite>
        cnt += usartWrite('\r');
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usartWrite>
 27c:	18 0f       	add	r17, r24
        cnt += usartWrite('\n');
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usartWrite>
 284:	81 0f       	add	r24, r17
        va_end(args);
    } else {
        return 0;
    }
    //usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
 286:	01 c0       	rjmp	.+2      	; 0x28a <usartStringPrintln+0x88>
        usartStringWrite(buffer);
        cnt += usartWrite('\r');
        cnt += usartWrite('\n');
        va_end(args);
    } else {
        return 0;
 288:	80 e0       	ldi	r24, 0x00	; 0
    }
    //usartFlush(); //make sure all buffered data has been written to the interface
    return cnt;
}
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de be       	out	0x3e, r13	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd be       	out	0x3d, r12	; 61
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <ringBufferCapacity>:
            bytes[i] = temp;
            cnt++;
        }
    }
    return cnt;
}
 2a6:	8f e7       	ldi	r24, 0x7F	; 127
 2a8:	08 95       	ret

000002aa <__vector_19>:
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
 2c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 2cc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 2d0:	fc 01       	movw	r30, r24
 2d2:	ec 57       	subi	r30, 0x7C	; 124
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	20 81       	ld	r18, Z
 2d8:	22 23       	and	r18, r18
 2da:	11 f1       	breq	.+68     	; 0x320 <__vector_19+0x76>
 2dc:	34 97       	sbiw	r30, 0x04	; 4
 2de:	01 90       	ld	r0, Z+
 2e0:	f0 81       	ld	r31, Z
 2e2:	e0 2d       	mov	r30, r0
 2e4:	30 81       	ld	r19, Z
 2e6:	ac 01       	movw	r20, r24
 2e8:	41 58       	subi	r20, 0x81	; 129
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	e4 17       	cp	r30, r20
 2ee:	f5 07       	cpc	r31, r21
 2f0:	31 f4       	brne	.+12     	; 0x2fe <__vector_19+0x54>
 2f2:	fc 01       	movw	r30, r24
 2f4:	e0 58       	subi	r30, 0x80	; 128
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	91 83       	std	Z+1, r25	; 0x01
 2fa:	80 83       	st	Z, r24
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <__vector_19+0x60>
 2fe:	dc 01       	movw	r26, r24
 300:	a0 58       	subi	r26, 0x80	; 128
 302:	bf 4f       	sbci	r27, 0xFF	; 255
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	ed 93       	st	X+, r30
 308:	fc 93       	st	X, r31
 30a:	fc 01       	movw	r30, r24
 30c:	ec 57       	subi	r30, 0x7C	; 124
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	21 50       	subi	r18, 0x01	; 1
 312:	20 83       	st	Z, r18
 314:	31 96       	adiw	r30, 0x01	; 1
 316:	20 81       	ld	r18, Z
 318:	22 23       	and	r18, r18
 31a:	21 f0       	breq	.+8      	; 0x324 <__vector_19+0x7a>
 31c:	10 82       	st	Z, r1
 31e:	03 c0       	rjmp	.+6      	; 0x326 <__vector_19+0x7c>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	01 c0       	rjmp	.+2      	; 0x326 <__vector_19+0x7c>
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	22 23       	and	r18, r18
 328:	19 f0       	breq	.+6      	; 0x330 <__vector_19+0x86>
 32a:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 32e:	05 c0       	rjmp	.+10     	; 0x33a <__vector_19+0x90>
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_18>:
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
 37a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 37e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <read>
 382:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <read+0x1>
 386:	fc 01       	movw	r30, r24
 388:	eb 57       	subi	r30, 0x7B	; 123
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	30 81       	ld	r19, Z
 38e:	31 11       	cpse	r19, r1
 390:	26 c0       	rjmp	.+76     	; 0x3de <__vector_18+0x86>
 392:	33 97       	sbiw	r30, 0x03	; 3
 394:	a0 81       	ld	r26, Z
 396:	b1 81       	ldd	r27, Z+1	; 0x01
 398:	2c 93       	st	X, r18
 39a:	40 81       	ld	r20, Z
 39c:	51 81       	ldd	r21, Z+1	; 0x01
 39e:	bc 01       	movw	r22, r24
 3a0:	61 58       	subi	r22, 0x81	; 129
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	46 17       	cp	r20, r22
 3a6:	57 07       	cpc	r21, r23
 3a8:	19 f4       	brne	.+6      	; 0x3b0 <__vector_18+0x58>
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	80 83       	st	Z, r24
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__vector_18+0x66>
 3b0:	fc 01       	movw	r30, r24
 3b2:	ee 57       	subi	r30, 0x7E	; 126
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	51 83       	std	Z+1, r21	; 0x01
 3bc:	40 83       	st	Z, r20
 3be:	fc 01       	movw	r30, r24
 3c0:	ec 57       	subi	r30, 0x7C	; 124
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	20 81       	ld	r18, Z
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	20 83       	st	Z, r18
 3ca:	2f 37       	cpi	r18, 0x7F	; 127
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <__vector_18+0x78>
 3ce:	31 e0       	ldi	r19, 0x01	; 1
 3d0:	33 23       	and	r19, r19
 3d2:	29 f0       	breq	.+10     	; 0x3de <__vector_18+0x86>
 3d4:	fc 01       	movw	r30, r24
 3d6:	eb 57       	subi	r30, 0x7B	; 123
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	20 83       	st	Z, r18
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <usartSetup>:
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	aa 1f       	adc	r26, r26
 416:	bb 1f       	adc	r27, r27
 418:	9c 01       	movw	r18, r24
 41a:	ad 01       	movw	r20, r26
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	44 1f       	adc	r20, r20
 422:	55 1f       	adc	r21, r21
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	44 1f       	adc	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	74 e2       	ldi	r23, 0x24	; 36
 430:	84 ef       	ldi	r24, 0xF4	; 244
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 de 02 	call	0x5bc	; 0x5bc <__udivmodsi4>
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	31 09       	sbc	r19, r1
 43c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 440:	e2 ec       	ldi	r30, 0xC2	; 194
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	8f 7b       	andi	r24, 0xBF	; 191
 448:	80 83       	st	Z, r24
 44a:	80 83       	st	Z, r24
 44c:	e1 ec       	ldi	r30, 0xC1	; 193
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	80 61       	ori	r24, 0x10	; 16
 454:	80 83       	st	Z, r24
 456:	80 81       	ld	r24, Z
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	80 83       	st	Z, r24
 45c:	80 81       	ld	r24, Z
 45e:	80 68       	ori	r24, 0x80	; 128
 460:	80 83       	st	Z, r24
 462:	86 e8       	ldi	r24, 0x86	; 134
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 19 03 	call	0x632	; 0x632 <malloc>
 46a:	ec 01       	movw	r28, r24
 46c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <read+0x1>
 470:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <read>
 474:	86 e8       	ldi	r24, 0x86	; 134
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 19 03 	call	0x632	; 0x632 <malloc>
 47c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 480:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 484:	fe 01       	movw	r30, r28
 486:	e0 58       	subi	r30, 0x80	; 128
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	d1 83       	std	Z+1, r29	; 0x01
 48c:	c0 83       	st	Z, r28
 48e:	32 96       	adiw	r30, 0x02	; 2
 490:	d1 83       	std	Z+1, r29	; 0x01
 492:	c0 83       	st	Z, r28
 494:	32 96       	adiw	r30, 0x02	; 2
 496:	10 82       	st	Z, r1
 498:	cb 57       	subi	r28, 0x7B	; 123
 49a:	df 4f       	sbci	r29, 0xFF	; 255
 49c:	18 82       	st	Y, r1
 49e:	fc 01       	movw	r30, r24
 4a0:	e0 58       	subi	r30, 0x80	; 128
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	91 83       	std	Z+1, r25	; 0x01
 4a6:	80 83       	st	Z, r24
 4a8:	32 96       	adiw	r30, 0x02	; 2
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
 4ae:	32 96       	adiw	r30, 0x02	; 2
 4b0:	10 82       	st	Z, r1
 4b2:	31 96       	adiw	r30, 0x01	; 1
 4b4:	10 82       	st	Z, r1
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <usartAvailableForWrite>:
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <__data_end>
 4c4:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <__data_end+0x1>
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ringBufferCapacity>
 4ce:	cc 57       	subi	r28, 0x7C	; 124
 4d0:	df 4f       	sbci	r29, 0xFF	; 255
 4d2:	98 81       	ld	r25, Y
 4d4:	89 1b       	sub	r24, r25
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <usartWrite>:
bool usartWrite(uint8_t byte)
{
    bool push;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) //got this from https://www.nongnu.org/avr-libc/user-manual/group__util__atomic.html
 4dc:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4de:	f8 94       	cli
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	35 c0       	rjmp	.+106    	; 0x54e <usartWrite+0x72>
    {
        push = ringBufferPush(write, byte);
 4e4:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 4e8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 * @param[in] value The element to be added
 * @return  True if successful, false otherwise
*/
static inline bool ringBufferPush(RingBuffer* ringBuffer, uint8_t value)
{
    if (ringBuffer->isFull) { //if the buffer is full return
 4ec:	f9 01       	movw	r30, r18
 4ee:	eb 57       	subi	r30, 0x7B	; 123
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	60 81       	ld	r22, Z
 4f4:	61 11       	cpse	r22, r1
 4f6:	27 c0       	rjmp	.+78     	; 0x546 <usartWrite+0x6a>
        return false;
    }
    *ringBuffer->write = value;
 4f8:	33 97       	sbiw	r30, 0x03	; 3
 4fa:	a0 81       	ld	r26, Z
 4fc:	b1 81       	ldd	r27, Z+1	; 0x01
 4fe:	8c 93       	st	X, r24

    if (ringBuffer->write == &ringBuffer->buffer[RING_BUFFER_CAPACITY - 1]) { //check if the write pointer is standing at the the end of the buffer
 500:	40 81       	ld	r20, Z
 502:	51 81       	ldd	r21, Z+1	; 0x01
 504:	33 97       	sbiw	r30, 0x03	; 3
 506:	4e 17       	cp	r20, r30
 508:	5f 07       	cpc	r21, r31
 50a:	21 f4       	brne	.+8      	; 0x514 <usartWrite+0x38>
        ringBuffer->write = ringBuffer->buffer;
 50c:	33 96       	adiw	r30, 0x03	; 3
 50e:	31 83       	std	Z+1, r19	; 0x01
 510:	20 83       	st	Z, r18
 512:	07 c0       	rjmp	.+14     	; 0x522 <usartWrite+0x46>
    } else {
        ringBuffer->write++;
 514:	f9 01       	movw	r30, r18
 516:	ee 57       	subi	r30, 0x7E	; 126
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	4f 5f       	subi	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	51 83       	std	Z+1, r21	; 0x01
 520:	40 83       	st	Z, r20
    }
    ringBuffer->usedCapacity++;
 522:	f9 01       	movw	r30, r18
 524:	ec 57       	subi	r30, 0x7C	; 124
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	90 81       	ld	r25, Z
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	90 83       	st	Z, r25
 * @param ringBuffer The RingBuffer instance
 * @return  True if full, false otherwise
*/
static inline bool ringBufferFull(const RingBuffer* ringBuffer)
{
    if (ringBuffer->usedCapacity == RING_BUFFER_CAPACITY - 1) {
 52e:	9f 37       	cpi	r25, 0x7F	; 127
 530:	09 f4       	brne	.+2      	; 0x534 <usartWrite+0x58>
        return true;
 532:	61 e0       	ldi	r22, 0x01	; 1
        ringBuffer->write = ringBuffer->buffer;
    } else {
        ringBuffer->write++;
    }
    ringBuffer->usedCapacity++;
    if (ringBufferFull(ringBuffer) == true) { //check if buffer is now full if yes Full=true
 534:	66 23       	and	r22, r22
 536:	49 f0       	breq	.+18     	; 0x54a <usartWrite+0x6e>
        ringBuffer->isFull = true;
 538:	f9 01       	movw	r30, r18
 53a:	eb 57       	subi	r30, 0x7B	; 123
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	90 83       	st	Z, r25
    }
    return true;
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	03 c0       	rjmp	.+6      	; 0x54c <usartWrite+0x70>
 * @return  True if successful, false otherwise
*/
static inline bool ringBufferPush(RingBuffer* ringBuffer, uint8_t value)
{
    if (ringBuffer->isFull) { //if the buffer is full return
        return false;
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	01 c0       	rjmp	.+2      	; 0x54c <usartWrite+0x70>
    }
    ringBuffer->usedCapacity++;
    if (ringBufferFull(ringBuffer) == true) { //check if buffer is now full if yes Full=true
        ringBuffer->isFull = true;
    }
    return true;
 54a:	21 e0       	ldi	r18, 0x01	; 1
}
bool usartWrite(uint8_t byte)
{
    bool push;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) //got this from https://www.nongnu.org/avr-libc/user-manual/group__util__atomic.html
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	91 11       	cpse	r25, r1
 550:	c9 cf       	rjmp	.-110    	; 0x4e4 <usartWrite+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 552:	7f bf       	out	0x3f, r23	; 63
    BIT_SET(UCSR0B, RXCIE0);
}

static inline void enableTransmitBufferEmptyInterrupt() //set UDRIE 1= enable data Register empty interrrupt
{
    BIT_SET(UCSR0B, UDRIE0);
 554:	e1 ec       	ldi	r30, 0xC1	; 193
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	80 62       	ori	r24, 0x20	; 32
 55c:	80 83       	st	Z, r24
    {
        push = ringBufferPush(write, byte);
    }
    enableTransmitBufferEmptyInterrupt();
    return push;
}
 55e:	82 2f       	mov	r24, r18
 560:	08 95       	ret

00000562 <usartFlush>:
void usartFlush()
{
    while (ringBufferEmpty(write) == false) { //wait until the buffer is empty
 562:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 566:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 * @param ringBuffer The RingBuffer instance
 * @return  True if empty, false otherwise
*/
static inline bool ringBufferEmpty(const RingBuffer* ringBuffer)
{
    if (ringBuffer->read == ringBuffer->write) { //when read and write pointer are the same the buffer is empty
 56a:	fc 01       	movw	r30, r24
 56c:	e0 58       	subi	r30, 0x80	; 128
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	20 81       	ld	r18, Z
 572:	31 81       	ldd	r19, Z+1	; 0x01
 574:	32 96       	adiw	r30, 0x02	; 2
 576:	80 81       	ld	r24, Z
 578:	91 81       	ldd	r25, Z+1	; 0x01
 57a:	82 17       	cp	r24, r18
 57c:	93 07       	cpc	r25, r19
 57e:	11 f4       	brne	.+4      	; 0x584 <usartFlush+0x22>
        return true;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	01 c0       	rjmp	.+2      	; 0x586 <usartFlush+0x24>
    } else {
        return false;
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	88 23       	and	r24, r24
 588:	61 f3       	breq	.-40     	; 0x562 <usartFlush>
        //do nothing
    }
    if (BIT_IS_SET(UCSR0A, UDRE0) && ringBufferEmpty(write) == true) { //check if buffer empty and empty data register flag is set
 58a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 58e:	08 95       	ret

00000590 <main>:
#include <stdlib.h>
#include <time.h>

int main(void)
{
    sei();
 590:	78 94       	sei
    pinMode(PB0, OUTPUT);
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 84 00 	call	0x108	; 0x108 <pinMode>
    pinMode(PB5, INPUT);
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	0e 94 84 00 	call	0x108	; 0x108 <pinMode>
    usartSetup(USART_B9600);
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	95 e2       	ldi	r25, 0x25	; 37
 5a6:	0e 94 00 02 	call	0x400	; 0x400 <usartSetup>
    while (1) {
        usartStringPrintln("Hello BAC1");
 5aa:	8e e0       	ldi	r24, 0x0E	; 14
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	9f 93       	push	r25
 5b0:	8f 93       	push	r24
 5b2:	0e 94 01 01 	call	0x202	; 0x202 <usartStringPrintln>
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	f7 cf       	rjmp	.-18     	; 0x5aa <main+0x1a>

000005bc <__udivmodsi4>:
 5bc:	a1 e2       	ldi	r26, 0x21	; 33
 5be:	1a 2e       	mov	r1, r26
 5c0:	aa 1b       	sub	r26, r26
 5c2:	bb 1b       	sub	r27, r27
 5c4:	fd 01       	movw	r30, r26
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__udivmodsi4_ep>

000005c8 <__udivmodsi4_loop>:
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	ee 1f       	adc	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	a2 17       	cp	r26, r18
 5d2:	b3 07       	cpc	r27, r19
 5d4:	e4 07       	cpc	r30, r20
 5d6:	f5 07       	cpc	r31, r21
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__udivmodsi4_ep>
 5da:	a2 1b       	sub	r26, r18
 5dc:	b3 0b       	sbc	r27, r19
 5de:	e4 0b       	sbc	r30, r20
 5e0:	f5 0b       	sbc	r31, r21

000005e2 <__udivmodsi4_ep>:
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a 94       	dec	r1
 5ec:	69 f7       	brne	.-38     	; 0x5c8 <__udivmodsi4_loop>
 5ee:	60 95       	com	r22
 5f0:	70 95       	com	r23
 5f2:	80 95       	com	r24
 5f4:	90 95       	com	r25
 5f6:	9b 01       	movw	r18, r22
 5f8:	ac 01       	movw	r20, r24
 5fa:	bd 01       	movw	r22, r26
 5fc:	cf 01       	movw	r24, r30
 5fe:	08 95       	ret

00000600 <__ashldi3>:
 600:	0f 93       	push	r16
 602:	08 30       	cpi	r16, 0x08	; 8
 604:	90 f0       	brcs	.+36     	; 0x62a <__ashldi3+0x2a>
 606:	98 2f       	mov	r25, r24
 608:	87 2f       	mov	r24, r23
 60a:	76 2f       	mov	r23, r22
 60c:	65 2f       	mov	r22, r21
 60e:	54 2f       	mov	r21, r20
 610:	43 2f       	mov	r20, r19
 612:	32 2f       	mov	r19, r18
 614:	22 27       	eor	r18, r18
 616:	08 50       	subi	r16, 0x08	; 8
 618:	f4 cf       	rjmp	.-24     	; 0x602 <__ashldi3+0x2>
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	44 1f       	adc	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	66 1f       	adc	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	0a 95       	dec	r16
 62c:	b2 f7       	brpl	.-20     	; 0x61a <__ashldi3+0x1a>
 62e:	0f 91       	pop	r16
 630:	08 95       	ret

00000632 <malloc>:
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 05       	cpc	r25, r1
 63e:	10 f4       	brcc	.+4      	; 0x644 <malloc+0x12>
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__flp>
 648:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__flp+0x1>
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	a0 e0       	ldi	r26, 0x00	; 0
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	30 97       	sbiw	r30, 0x00	; 0
 656:	19 f1       	breq	.+70     	; 0x69e <malloc+0x6c>
 658:	40 81       	ld	r20, Z
 65a:	51 81       	ldd	r21, Z+1	; 0x01
 65c:	02 81       	ldd	r16, Z+2	; 0x02
 65e:	13 81       	ldd	r17, Z+3	; 0x03
 660:	48 17       	cp	r20, r24
 662:	59 07       	cpc	r21, r25
 664:	c8 f0       	brcs	.+50     	; 0x698 <malloc+0x66>
 666:	84 17       	cp	r24, r20
 668:	95 07       	cpc	r25, r21
 66a:	69 f4       	brne	.+26     	; 0x686 <malloc+0x54>
 66c:	10 97       	sbiw	r26, 0x00	; 0
 66e:	31 f0       	breq	.+12     	; 0x67c <malloc+0x4a>
 670:	12 96       	adiw	r26, 0x02	; 2
 672:	0c 93       	st	X, r16
 674:	12 97       	sbiw	r26, 0x02	; 2
 676:	13 96       	adiw	r26, 0x03	; 3
 678:	1c 93       	st	X, r17
 67a:	27 c0       	rjmp	.+78     	; 0x6ca <malloc+0x98>
 67c:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <__flp>
 680:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <__flp+0x1>
 684:	22 c0       	rjmp	.+68     	; 0x6ca <malloc+0x98>
 686:	21 15       	cp	r18, r1
 688:	31 05       	cpc	r19, r1
 68a:	19 f0       	breq	.+6      	; 0x692 <malloc+0x60>
 68c:	42 17       	cp	r20, r18
 68e:	53 07       	cpc	r21, r19
 690:	18 f4       	brcc	.+6      	; 0x698 <malloc+0x66>
 692:	9a 01       	movw	r18, r20
 694:	bd 01       	movw	r22, r26
 696:	ef 01       	movw	r28, r30
 698:	df 01       	movw	r26, r30
 69a:	f8 01       	movw	r30, r16
 69c:	db cf       	rjmp	.-74     	; 0x654 <malloc+0x22>
 69e:	21 15       	cp	r18, r1
 6a0:	31 05       	cpc	r19, r1
 6a2:	f9 f0       	breq	.+62     	; 0x6e2 <malloc+0xb0>
 6a4:	28 1b       	sub	r18, r24
 6a6:	39 0b       	sbc	r19, r25
 6a8:	24 30       	cpi	r18, 0x04	; 4
 6aa:	31 05       	cpc	r19, r1
 6ac:	80 f4       	brcc	.+32     	; 0x6ce <malloc+0x9c>
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	9b 81       	ldd	r25, Y+3	; 0x03
 6b2:	61 15       	cp	r22, r1
 6b4:	71 05       	cpc	r23, r1
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <malloc+0x8e>
 6b8:	fb 01       	movw	r30, r22
 6ba:	93 83       	std	Z+3, r25	; 0x03
 6bc:	82 83       	std	Z+2, r24	; 0x02
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <malloc+0x96>
 6c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__flp+0x1>
 6c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__flp>
 6c8:	fe 01       	movw	r30, r28
 6ca:	32 96       	adiw	r30, 0x02	; 2
 6cc:	44 c0       	rjmp	.+136    	; 0x756 <malloc+0x124>
 6ce:	fe 01       	movw	r30, r28
 6d0:	e2 0f       	add	r30, r18
 6d2:	f3 1f       	adc	r31, r19
 6d4:	81 93       	st	Z+, r24
 6d6:	91 93       	st	Z+, r25
 6d8:	22 50       	subi	r18, 0x02	; 2
 6da:	31 09       	sbc	r19, r1
 6dc:	39 83       	std	Y+1, r19	; 0x01
 6de:	28 83       	st	Y, r18
 6e0:	3a c0       	rjmp	.+116    	; 0x756 <malloc+0x124>
 6e2:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 6e6:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 6ea:	23 2b       	or	r18, r19
 6ec:	41 f4       	brne	.+16     	; 0x6fe <malloc+0xcc>
 6ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 6f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 6f6:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <__brkval+0x1>
 6fa:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <__brkval>
 6fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 702:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 706:	21 15       	cp	r18, r1
 708:	31 05       	cpc	r19, r1
 70a:	41 f4       	brne	.+16     	; 0x71c <malloc+0xea>
 70c:	2d b7       	in	r18, 0x3d	; 61
 70e:	3e b7       	in	r19, 0x3e	; 62
 710:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 714:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 718:	24 1b       	sub	r18, r20
 71a:	35 0b       	sbc	r19, r21
 71c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__brkval>
 720:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__brkval+0x1>
 724:	e2 17       	cp	r30, r18
 726:	f3 07       	cpc	r31, r19
 728:	a0 f4       	brcc	.+40     	; 0x752 <malloc+0x120>
 72a:	2e 1b       	sub	r18, r30
 72c:	3f 0b       	sbc	r19, r31
 72e:	28 17       	cp	r18, r24
 730:	39 07       	cpc	r19, r25
 732:	78 f0       	brcs	.+30     	; 0x752 <malloc+0x120>
 734:	ac 01       	movw	r20, r24
 736:	4e 5f       	subi	r20, 0xFE	; 254
 738:	5f 4f       	sbci	r21, 0xFF	; 255
 73a:	24 17       	cp	r18, r20
 73c:	35 07       	cpc	r19, r21
 73e:	48 f0       	brcs	.+18     	; 0x752 <malloc+0x120>
 740:	4e 0f       	add	r20, r30
 742:	5f 1f       	adc	r21, r31
 744:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <__brkval+0x1>
 748:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <__brkval>
 74c:	81 93       	st	Z+, r24
 74e:	91 93       	st	Z+, r25
 750:	02 c0       	rjmp	.+4      	; 0x756 <malloc+0x124>
 752:	e0 e0       	ldi	r30, 0x00	; 0
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	cf 01       	movw	r24, r30
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	08 95       	ret

00000762 <free>:
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	09 f4       	brne	.+2      	; 0x76c <free+0xa>
 76a:	81 c0       	rjmp	.+258    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 76c:	fc 01       	movw	r30, r24
 76e:	32 97       	sbiw	r30, 0x02	; 2
 770:	13 82       	std	Z+3, r1	; 0x03
 772:	12 82       	std	Z+2, r1	; 0x02
 774:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__flp>
 778:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__flp+0x1>
 77c:	10 97       	sbiw	r26, 0x00	; 0
 77e:	81 f4       	brne	.+32     	; 0x7a0 <free+0x3e>
 780:	20 81       	ld	r18, Z
 782:	31 81       	ldd	r19, Z+1	; 0x01
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 78c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 790:	28 17       	cp	r18, r24
 792:	39 07       	cpc	r19, r25
 794:	51 f5       	brne	.+84     	; 0x7ea <free+0x88>
 796:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <__brkval+0x1>
 79a:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <__brkval>
 79e:	67 c0       	rjmp	.+206    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 7a0:	ed 01       	movw	r28, r26
 7a2:	20 e0       	ldi	r18, 0x00	; 0
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	ce 17       	cp	r28, r30
 7a8:	df 07       	cpc	r29, r31
 7aa:	40 f4       	brcc	.+16     	; 0x7bc <free+0x5a>
 7ac:	4a 81       	ldd	r20, Y+2	; 0x02
 7ae:	5b 81       	ldd	r21, Y+3	; 0x03
 7b0:	9e 01       	movw	r18, r28
 7b2:	41 15       	cp	r20, r1
 7b4:	51 05       	cpc	r21, r1
 7b6:	f1 f0       	breq	.+60     	; 0x7f4 <free+0x92>
 7b8:	ea 01       	movw	r28, r20
 7ba:	f5 cf       	rjmp	.-22     	; 0x7a6 <free+0x44>
 7bc:	d3 83       	std	Z+3, r29	; 0x03
 7be:	c2 83       	std	Z+2, r28	; 0x02
 7c0:	40 81       	ld	r20, Z
 7c2:	51 81       	ldd	r21, Z+1	; 0x01
 7c4:	84 0f       	add	r24, r20
 7c6:	95 1f       	adc	r25, r21
 7c8:	c8 17       	cp	r28, r24
 7ca:	d9 07       	cpc	r29, r25
 7cc:	59 f4       	brne	.+22     	; 0x7e4 <free+0x82>
 7ce:	88 81       	ld	r24, Y
 7d0:	99 81       	ldd	r25, Y+1	; 0x01
 7d2:	84 0f       	add	r24, r20
 7d4:	95 1f       	adc	r25, r21
 7d6:	02 96       	adiw	r24, 0x02	; 2
 7d8:	91 83       	std	Z+1, r25	; 0x01
 7da:	80 83       	st	Z, r24
 7dc:	8a 81       	ldd	r24, Y+2	; 0x02
 7de:	9b 81       	ldd	r25, Y+3	; 0x03
 7e0:	93 83       	std	Z+3, r25	; 0x03
 7e2:	82 83       	std	Z+2, r24	; 0x02
 7e4:	21 15       	cp	r18, r1
 7e6:	31 05       	cpc	r19, r1
 7e8:	29 f4       	brne	.+10     	; 0x7f4 <free+0x92>
 7ea:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <__flp+0x1>
 7ee:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <__flp>
 7f2:	3d c0       	rjmp	.+122    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 7f4:	e9 01       	movw	r28, r18
 7f6:	fb 83       	std	Y+3, r31	; 0x03
 7f8:	ea 83       	std	Y+2, r30	; 0x02
 7fa:	49 91       	ld	r20, Y+
 7fc:	59 91       	ld	r21, Y+
 7fe:	c4 0f       	add	r28, r20
 800:	d5 1f       	adc	r29, r21
 802:	ec 17       	cp	r30, r28
 804:	fd 07       	cpc	r31, r29
 806:	61 f4       	brne	.+24     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 808:	80 81       	ld	r24, Z
 80a:	91 81       	ldd	r25, Z+1	; 0x01
 80c:	84 0f       	add	r24, r20
 80e:	95 1f       	adc	r25, r21
 810:	02 96       	adiw	r24, 0x02	; 2
 812:	e9 01       	movw	r28, r18
 814:	99 83       	std	Y+1, r25	; 0x01
 816:	88 83       	st	Y, r24
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	93 81       	ldd	r25, Z+3	; 0x03
 81c:	9b 83       	std	Y+3, r25	; 0x03
 81e:	8a 83       	std	Y+2, r24	; 0x02
 820:	e0 e0       	ldi	r30, 0x00	; 0
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	12 96       	adiw	r26, 0x02	; 2
 826:	8d 91       	ld	r24, X+
 828:	9c 91       	ld	r25, X
 82a:	13 97       	sbiw	r26, 0x03	; 3
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	19 f0       	breq	.+6      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 830:	fd 01       	movw	r30, r26
 832:	dc 01       	movw	r26, r24
 834:	f7 cf       	rjmp	.-18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 836:	8d 91       	ld	r24, X+
 838:	9c 91       	ld	r25, X
 83a:	11 97       	sbiw	r26, 0x01	; 1
 83c:	9d 01       	movw	r18, r26
 83e:	2e 5f       	subi	r18, 0xFE	; 254
 840:	3f 4f       	sbci	r19, 0xFF	; 255
 842:	82 0f       	add	r24, r18
 844:	93 1f       	adc	r25, r19
 846:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 84a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 84e:	28 17       	cp	r18, r24
 850:	39 07       	cpc	r19, r25
 852:	69 f4       	brne	.+26     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 854:	30 97       	sbiw	r30, 0x00	; 0
 856:	29 f4       	brne	.+10     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 858:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__flp+0x1>
 85c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__flp>
 860:	02 c0       	rjmp	.+4      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 862:	13 82       	std	Z+3, r1	; 0x03
 864:	12 82       	std	Z+2, r1	; 0x02
 866:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__brkval+0x1>
 86a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__brkval>
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <vsnprintf>:
 874:	ae e0       	ldi	r26, 0x0E	; 14
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	e0 e4       	ldi	r30, 0x40	; 64
 87a:	f4 e0       	ldi	r31, 0x04	; 4
 87c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__prologue_saves__+0x1c>
 880:	8c 01       	movw	r16, r24
 882:	fa 01       	movw	r30, r20
 884:	86 e0       	ldi	r24, 0x06	; 6
 886:	8c 83       	std	Y+4, r24	; 0x04
 888:	1a 83       	std	Y+2, r17	; 0x02
 88a:	09 83       	std	Y+1, r16	; 0x01
 88c:	77 ff       	sbrs	r23, 7
 88e:	02 c0       	rjmp	.+4      	; 0x894 <vsnprintf+0x20>
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e8       	ldi	r23, 0x80	; 128
 894:	cb 01       	movw	r24, r22
 896:	01 97       	sbiw	r24, 0x01	; 1
 898:	9e 83       	std	Y+6, r25	; 0x06
 89a:	8d 83       	std	Y+5, r24	; 0x05
 89c:	a9 01       	movw	r20, r18
 89e:	bf 01       	movw	r22, r30
 8a0:	ce 01       	movw	r24, r28
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	0e 94 66 04 	call	0x8cc	; 0x8cc <vfprintf>
 8a8:	4d 81       	ldd	r20, Y+5	; 0x05
 8aa:	5e 81       	ldd	r21, Y+6	; 0x06
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <vsnprintf+0x50>
 8b0:	2f 81       	ldd	r18, Y+7	; 0x07
 8b2:	38 85       	ldd	r19, Y+8	; 0x08
 8b4:	42 17       	cp	r20, r18
 8b6:	53 07       	cpc	r21, r19
 8b8:	0c f4       	brge	.+2      	; 0x8bc <vsnprintf+0x48>
 8ba:	9a 01       	movw	r18, r20
 8bc:	f8 01       	movw	r30, r16
 8be:	e2 0f       	add	r30, r18
 8c0:	f3 1f       	adc	r31, r19
 8c2:	10 82       	st	Z, r1
 8c4:	2e 96       	adiw	r28, 0x0e	; 14
 8c6:	e4 e0       	ldi	r30, 0x04	; 4
 8c8:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__epilogue_restores__+0x1c>

000008cc <vfprintf>:
 8cc:	ab e0       	ldi	r26, 0x0B	; 11
 8ce:	b0 e0       	ldi	r27, 0x00	; 0
 8d0:	ec e6       	ldi	r30, 0x6C	; 108
 8d2:	f4 e0       	ldi	r31, 0x04	; 4
 8d4:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__prologue_saves__>
 8d8:	6c 01       	movw	r12, r24
 8da:	7b 01       	movw	r14, r22
 8dc:	8a 01       	movw	r16, r20
 8de:	fc 01       	movw	r30, r24
 8e0:	17 82       	std	Z+7, r1	; 0x07
 8e2:	16 82       	std	Z+6, r1	; 0x06
 8e4:	83 81       	ldd	r24, Z+3	; 0x03
 8e6:	81 ff       	sbrs	r24, 1
 8e8:	cc c1       	rjmp	.+920    	; 0xc82 <__stack+0x383>
 8ea:	ce 01       	movw	r24, r28
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	3c 01       	movw	r6, r24
 8f0:	f6 01       	movw	r30, r12
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	f7 01       	movw	r30, r14
 8f6:	93 fd       	sbrc	r25, 3
 8f8:	85 91       	lpm	r24, Z+
 8fa:	93 ff       	sbrs	r25, 3
 8fc:	81 91       	ld	r24, Z+
 8fe:	7f 01       	movw	r14, r30
 900:	88 23       	and	r24, r24
 902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
 904:	ba c1       	rjmp	.+884    	; 0xc7a <__stack+0x37b>
 906:	85 32       	cpi	r24, 0x25	; 37
 908:	39 f4       	brne	.+14     	; 0x918 <__stack+0x19>
 90a:	93 fd       	sbrc	r25, 3
 90c:	85 91       	lpm	r24, Z+
 90e:	93 ff       	sbrs	r25, 3
 910:	81 91       	ld	r24, Z+
 912:	7f 01       	movw	r14, r30
 914:	85 32       	cpi	r24, 0x25	; 37
 916:	29 f4       	brne	.+10     	; 0x922 <__stack+0x23>
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 920:	e7 cf       	rjmp	.-50     	; 0x8f0 <vfprintf+0x24>
 922:	91 2c       	mov	r9, r1
 924:	21 2c       	mov	r2, r1
 926:	31 2c       	mov	r3, r1
 928:	ff e1       	ldi	r31, 0x1F	; 31
 92a:	f3 15       	cp	r31, r3
 92c:	d8 f0       	brcs	.+54     	; 0x964 <__stack+0x65>
 92e:	8b 32       	cpi	r24, 0x2B	; 43
 930:	79 f0       	breq	.+30     	; 0x950 <__stack+0x51>
 932:	38 f4       	brcc	.+14     	; 0x942 <__stack+0x43>
 934:	80 32       	cpi	r24, 0x20	; 32
 936:	79 f0       	breq	.+30     	; 0x956 <__stack+0x57>
 938:	83 32       	cpi	r24, 0x23	; 35
 93a:	a1 f4       	brne	.+40     	; 0x964 <__stack+0x65>
 93c:	23 2d       	mov	r18, r3
 93e:	20 61       	ori	r18, 0x10	; 16
 940:	1d c0       	rjmp	.+58     	; 0x97c <__stack+0x7d>
 942:	8d 32       	cpi	r24, 0x2D	; 45
 944:	61 f0       	breq	.+24     	; 0x95e <__stack+0x5f>
 946:	80 33       	cpi	r24, 0x30	; 48
 948:	69 f4       	brne	.+26     	; 0x964 <__stack+0x65>
 94a:	23 2d       	mov	r18, r3
 94c:	21 60       	ori	r18, 0x01	; 1
 94e:	16 c0       	rjmp	.+44     	; 0x97c <__stack+0x7d>
 950:	83 2d       	mov	r24, r3
 952:	82 60       	ori	r24, 0x02	; 2
 954:	38 2e       	mov	r3, r24
 956:	e3 2d       	mov	r30, r3
 958:	e4 60       	ori	r30, 0x04	; 4
 95a:	3e 2e       	mov	r3, r30
 95c:	2a c0       	rjmp	.+84     	; 0x9b2 <__stack+0xb3>
 95e:	f3 2d       	mov	r31, r3
 960:	f8 60       	ori	r31, 0x08	; 8
 962:	1d c0       	rjmp	.+58     	; 0x99e <__stack+0x9f>
 964:	37 fc       	sbrc	r3, 7
 966:	2d c0       	rjmp	.+90     	; 0x9c2 <__stack+0xc3>
 968:	20 ed       	ldi	r18, 0xD0	; 208
 96a:	28 0f       	add	r18, r24
 96c:	2a 30       	cpi	r18, 0x0A	; 10
 96e:	40 f0       	brcs	.+16     	; 0x980 <__stack+0x81>
 970:	8e 32       	cpi	r24, 0x2E	; 46
 972:	b9 f4       	brne	.+46     	; 0x9a2 <__stack+0xa3>
 974:	36 fc       	sbrc	r3, 6
 976:	81 c1       	rjmp	.+770    	; 0xc7a <__stack+0x37b>
 978:	23 2d       	mov	r18, r3
 97a:	20 64       	ori	r18, 0x40	; 64
 97c:	32 2e       	mov	r3, r18
 97e:	19 c0       	rjmp	.+50     	; 0x9b2 <__stack+0xb3>
 980:	36 fe       	sbrs	r3, 6
 982:	06 c0       	rjmp	.+12     	; 0x990 <__stack+0x91>
 984:	8a e0       	ldi	r24, 0x0A	; 10
 986:	98 9e       	mul	r9, r24
 988:	20 0d       	add	r18, r0
 98a:	11 24       	eor	r1, r1
 98c:	92 2e       	mov	r9, r18
 98e:	11 c0       	rjmp	.+34     	; 0x9b2 <__stack+0xb3>
 990:	ea e0       	ldi	r30, 0x0A	; 10
 992:	2e 9e       	mul	r2, r30
 994:	20 0d       	add	r18, r0
 996:	11 24       	eor	r1, r1
 998:	22 2e       	mov	r2, r18
 99a:	f3 2d       	mov	r31, r3
 99c:	f0 62       	ori	r31, 0x20	; 32
 99e:	3f 2e       	mov	r3, r31
 9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <__stack+0xb3>
 9a2:	8c 36       	cpi	r24, 0x6C	; 108
 9a4:	21 f4       	brne	.+8      	; 0x9ae <__stack+0xaf>
 9a6:	83 2d       	mov	r24, r3
 9a8:	80 68       	ori	r24, 0x80	; 128
 9aa:	38 2e       	mov	r3, r24
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	88 36       	cpi	r24, 0x68	; 104
 9b0:	41 f4       	brne	.+16     	; 0x9c2 <__stack+0xc3>
 9b2:	f7 01       	movw	r30, r14
 9b4:	93 fd       	sbrc	r25, 3
 9b6:	85 91       	lpm	r24, Z+
 9b8:	93 ff       	sbrs	r25, 3
 9ba:	81 91       	ld	r24, Z+
 9bc:	7f 01       	movw	r14, r30
 9be:	81 11       	cpse	r24, r1
 9c0:	b3 cf       	rjmp	.-154    	; 0x928 <__stack+0x29>
 9c2:	98 2f       	mov	r25, r24
 9c4:	9f 7d       	andi	r25, 0xDF	; 223
 9c6:	95 54       	subi	r25, 0x45	; 69
 9c8:	93 30       	cpi	r25, 0x03	; 3
 9ca:	28 f4       	brcc	.+10     	; 0x9d6 <__stack+0xd7>
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	9f e3       	ldi	r25, 0x3F	; 63
 9d2:	99 83       	std	Y+1, r25	; 0x01
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__stack+0xf1>
 9d6:	83 36       	cpi	r24, 0x63	; 99
 9d8:	31 f0       	breq	.+12     	; 0x9e6 <__stack+0xe7>
 9da:	83 37       	cpi	r24, 0x73	; 115
 9dc:	71 f0       	breq	.+28     	; 0x9fa <__stack+0xfb>
 9de:	83 35       	cpi	r24, 0x53	; 83
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <__stack+0xe5>
 9e2:	59 c0       	rjmp	.+178    	; 0xa96 <__stack+0x197>
 9e4:	21 c0       	rjmp	.+66     	; 0xa28 <__stack+0x129>
 9e6:	f8 01       	movw	r30, r16
 9e8:	80 81       	ld	r24, Z
 9ea:	89 83       	std	Y+1, r24	; 0x01
 9ec:	0e 5f       	subi	r16, 0xFE	; 254
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	88 24       	eor	r8, r8
 9f2:	83 94       	inc	r8
 9f4:	91 2c       	mov	r9, r1
 9f6:	53 01       	movw	r10, r6
 9f8:	13 c0       	rjmp	.+38     	; 0xa20 <__stack+0x121>
 9fa:	28 01       	movw	r4, r16
 9fc:	f2 e0       	ldi	r31, 0x02	; 2
 9fe:	4f 0e       	add	r4, r31
 a00:	51 1c       	adc	r5, r1
 a02:	f8 01       	movw	r30, r16
 a04:	a0 80       	ld	r10, Z
 a06:	b1 80       	ldd	r11, Z+1	; 0x01
 a08:	36 fe       	sbrs	r3, 6
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x113>
 a0c:	69 2d       	mov	r22, r9
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x117>
 a12:	6f ef       	ldi	r22, 0xFF	; 255
 a14:	7f ef       	ldi	r23, 0xFF	; 255
 a16:	c5 01       	movw	r24, r10
 a18:	0e 94 52 06 	call	0xca4	; 0xca4 <strnlen>
 a1c:	4c 01       	movw	r8, r24
 a1e:	82 01       	movw	r16, r4
 a20:	f3 2d       	mov	r31, r3
 a22:	ff 77       	andi	r31, 0x7F	; 127
 a24:	3f 2e       	mov	r3, r31
 a26:	16 c0       	rjmp	.+44     	; 0xa54 <__stack+0x155>
 a28:	28 01       	movw	r4, r16
 a2a:	22 e0       	ldi	r18, 0x02	; 2
 a2c:	42 0e       	add	r4, r18
 a2e:	51 1c       	adc	r5, r1
 a30:	f8 01       	movw	r30, r16
 a32:	a0 80       	ld	r10, Z
 a34:	b1 80       	ldd	r11, Z+1	; 0x01
 a36:	36 fe       	sbrs	r3, 6
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
 a3a:	69 2d       	mov	r22, r9
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	6f ef       	ldi	r22, 0xFF	; 255
 a42:	7f ef       	ldi	r23, 0xFF	; 255
 a44:	c5 01       	movw	r24, r10
 a46:	0e 94 47 06 	call	0xc8e	; 0xc8e <strnlen_P>
 a4a:	4c 01       	movw	r8, r24
 a4c:	f3 2d       	mov	r31, r3
 a4e:	f0 68       	ori	r31, 0x80	; 128
 a50:	3f 2e       	mov	r3, r31
 a52:	82 01       	movw	r16, r4
 a54:	33 fc       	sbrc	r3, 3
 a56:	1b c0       	rjmp	.+54     	; 0xa8e <__stack+0x18f>
 a58:	82 2d       	mov	r24, r2
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	88 16       	cp	r8, r24
 a5e:	99 06       	cpc	r9, r25
 a60:	b0 f4       	brcc	.+44     	; 0xa8e <__stack+0x18f>
 a62:	b6 01       	movw	r22, r12
 a64:	80 e2       	ldi	r24, 0x20	; 32
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 a6c:	2a 94       	dec	r2
 a6e:	f4 cf       	rjmp	.-24     	; 0xa58 <__stack+0x159>
 a70:	f5 01       	movw	r30, r10
 a72:	37 fc       	sbrc	r3, 7
 a74:	85 91       	lpm	r24, Z+
 a76:	37 fe       	sbrs	r3, 7
 a78:	81 91       	ld	r24, Z+
 a7a:	5f 01       	movw	r10, r30
 a7c:	b6 01       	movw	r22, r12
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 a84:	21 10       	cpse	r2, r1
 a86:	2a 94       	dec	r2
 a88:	21 e0       	ldi	r18, 0x01	; 1
 a8a:	82 1a       	sub	r8, r18
 a8c:	91 08       	sbc	r9, r1
 a8e:	81 14       	cp	r8, r1
 a90:	91 04       	cpc	r9, r1
 a92:	71 f7       	brne	.-36     	; 0xa70 <__stack+0x171>
 a94:	e8 c0       	rjmp	.+464    	; 0xc66 <__stack+0x367>
 a96:	84 36       	cpi	r24, 0x64	; 100
 a98:	11 f0       	breq	.+4      	; 0xa9e <__stack+0x19f>
 a9a:	89 36       	cpi	r24, 0x69	; 105
 a9c:	41 f5       	brne	.+80     	; 0xaee <__stack+0x1ef>
 a9e:	f8 01       	movw	r30, r16
 aa0:	37 fe       	sbrs	r3, 7
 aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__stack+0x1b3>
 aa4:	60 81       	ld	r22, Z
 aa6:	71 81       	ldd	r23, Z+1	; 0x01
 aa8:	82 81       	ldd	r24, Z+2	; 0x02
 aaa:	93 81       	ldd	r25, Z+3	; 0x03
 aac:	0c 5f       	subi	r16, 0xFC	; 252
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	08 c0       	rjmp	.+16     	; 0xac2 <__stack+0x1c3>
 ab2:	60 81       	ld	r22, Z
 ab4:	71 81       	ldd	r23, Z+1	; 0x01
 ab6:	07 2e       	mov	r0, r23
 ab8:	00 0c       	add	r0, r0
 aba:	88 0b       	sbc	r24, r24
 abc:	99 0b       	sbc	r25, r25
 abe:	0e 5f       	subi	r16, 0xFE	; 254
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	f3 2d       	mov	r31, r3
 ac4:	ff 76       	andi	r31, 0x6F	; 111
 ac6:	3f 2e       	mov	r3, r31
 ac8:	97 ff       	sbrs	r25, 7
 aca:	09 c0       	rjmp	.+18     	; 0xade <__stack+0x1df>
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	f0 68       	ori	r31, 0x80	; 128
 adc:	3f 2e       	mov	r3, r31
 ade:	2a e0       	ldi	r18, 0x0A	; 10
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	a3 01       	movw	r20, r6
 ae4:	0e 94 99 06 	call	0xd32	; 0xd32 <__ultoa_invert>
 ae8:	88 2e       	mov	r8, r24
 aea:	86 18       	sub	r8, r6
 aec:	45 c0       	rjmp	.+138    	; 0xb78 <__stack+0x279>
 aee:	85 37       	cpi	r24, 0x75	; 117
 af0:	31 f4       	brne	.+12     	; 0xafe <__stack+0x1ff>
 af2:	23 2d       	mov	r18, r3
 af4:	2f 7e       	andi	r18, 0xEF	; 239
 af6:	b2 2e       	mov	r11, r18
 af8:	2a e0       	ldi	r18, 0x0A	; 10
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	25 c0       	rjmp	.+74     	; 0xb48 <__stack+0x249>
 afe:	93 2d       	mov	r25, r3
 b00:	99 7f       	andi	r25, 0xF9	; 249
 b02:	b9 2e       	mov	r11, r25
 b04:	8f 36       	cpi	r24, 0x6F	; 111
 b06:	c1 f0       	breq	.+48     	; 0xb38 <__stack+0x239>
 b08:	18 f4       	brcc	.+6      	; 0xb10 <__stack+0x211>
 b0a:	88 35       	cpi	r24, 0x58	; 88
 b0c:	79 f0       	breq	.+30     	; 0xb2c <__stack+0x22d>
 b0e:	b5 c0       	rjmp	.+362    	; 0xc7a <__stack+0x37b>
 b10:	80 37       	cpi	r24, 0x70	; 112
 b12:	19 f0       	breq	.+6      	; 0xb1a <__stack+0x21b>
 b14:	88 37       	cpi	r24, 0x78	; 120
 b16:	21 f0       	breq	.+8      	; 0xb20 <__stack+0x221>
 b18:	b0 c0       	rjmp	.+352    	; 0xc7a <__stack+0x37b>
 b1a:	e9 2f       	mov	r30, r25
 b1c:	e0 61       	ori	r30, 0x10	; 16
 b1e:	be 2e       	mov	r11, r30
 b20:	b4 fe       	sbrs	r11, 4
 b22:	0d c0       	rjmp	.+26     	; 0xb3e <__stack+0x23f>
 b24:	fb 2d       	mov	r31, r11
 b26:	f4 60       	ori	r31, 0x04	; 4
 b28:	bf 2e       	mov	r11, r31
 b2a:	09 c0       	rjmp	.+18     	; 0xb3e <__stack+0x23f>
 b2c:	34 fe       	sbrs	r3, 4
 b2e:	0a c0       	rjmp	.+20     	; 0xb44 <__stack+0x245>
 b30:	29 2f       	mov	r18, r25
 b32:	26 60       	ori	r18, 0x06	; 6
 b34:	b2 2e       	mov	r11, r18
 b36:	06 c0       	rjmp	.+12     	; 0xb44 <__stack+0x245>
 b38:	28 e0       	ldi	r18, 0x08	; 8
 b3a:	30 e0       	ldi	r19, 0x00	; 0
 b3c:	05 c0       	rjmp	.+10     	; 0xb48 <__stack+0x249>
 b3e:	20 e1       	ldi	r18, 0x10	; 16
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <__stack+0x249>
 b44:	20 e1       	ldi	r18, 0x10	; 16
 b46:	32 e0       	ldi	r19, 0x02	; 2
 b48:	f8 01       	movw	r30, r16
 b4a:	b7 fe       	sbrs	r11, 7
 b4c:	07 c0       	rjmp	.+14     	; 0xb5c <__stack+0x25d>
 b4e:	60 81       	ld	r22, Z
 b50:	71 81       	ldd	r23, Z+1	; 0x01
 b52:	82 81       	ldd	r24, Z+2	; 0x02
 b54:	93 81       	ldd	r25, Z+3	; 0x03
 b56:	0c 5f       	subi	r16, 0xFC	; 252
 b58:	1f 4f       	sbci	r17, 0xFF	; 255
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <__stack+0x269>
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 5f       	subi	r16, 0xFE	; 254
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	a3 01       	movw	r20, r6
 b6a:	0e 94 99 06 	call	0xd32	; 0xd32 <__ultoa_invert>
 b6e:	88 2e       	mov	r8, r24
 b70:	86 18       	sub	r8, r6
 b72:	fb 2d       	mov	r31, r11
 b74:	ff 77       	andi	r31, 0x7F	; 127
 b76:	3f 2e       	mov	r3, r31
 b78:	36 fe       	sbrs	r3, 6
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <__stack+0x297>
 b7c:	23 2d       	mov	r18, r3
 b7e:	2e 7f       	andi	r18, 0xFE	; 254
 b80:	a2 2e       	mov	r10, r18
 b82:	89 14       	cp	r8, r9
 b84:	58 f4       	brcc	.+22     	; 0xb9c <__stack+0x29d>
 b86:	34 fe       	sbrs	r3, 4
 b88:	0b c0       	rjmp	.+22     	; 0xba0 <__stack+0x2a1>
 b8a:	32 fc       	sbrc	r3, 2
 b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__stack+0x2a1>
 b8e:	83 2d       	mov	r24, r3
 b90:	8e 7e       	andi	r24, 0xEE	; 238
 b92:	a8 2e       	mov	r10, r24
 b94:	05 c0       	rjmp	.+10     	; 0xba0 <__stack+0x2a1>
 b96:	b8 2c       	mov	r11, r8
 b98:	a3 2c       	mov	r10, r3
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <__stack+0x2a3>
 b9c:	b8 2c       	mov	r11, r8
 b9e:	01 c0       	rjmp	.+2      	; 0xba2 <__stack+0x2a3>
 ba0:	b9 2c       	mov	r11, r9
 ba2:	a4 fe       	sbrs	r10, 4
 ba4:	0f c0       	rjmp	.+30     	; 0xbc4 <__stack+0x2c5>
 ba6:	fe 01       	movw	r30, r28
 ba8:	e8 0d       	add	r30, r8
 baa:	f1 1d       	adc	r31, r1
 bac:	80 81       	ld	r24, Z
 bae:	80 33       	cpi	r24, 0x30	; 48
 bb0:	21 f4       	brne	.+8      	; 0xbba <__stack+0x2bb>
 bb2:	9a 2d       	mov	r25, r10
 bb4:	99 7e       	andi	r25, 0xE9	; 233
 bb6:	a9 2e       	mov	r10, r25
 bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__stack+0x2cd>
 bba:	a2 fe       	sbrs	r10, 2
 bbc:	06 c0       	rjmp	.+12     	; 0xbca <__stack+0x2cb>
 bbe:	b3 94       	inc	r11
 bc0:	b3 94       	inc	r11
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__stack+0x2cd>
 bc4:	8a 2d       	mov	r24, r10
 bc6:	86 78       	andi	r24, 0x86	; 134
 bc8:	09 f0       	breq	.+2      	; 0xbcc <__stack+0x2cd>
 bca:	b3 94       	inc	r11
 bcc:	a3 fc       	sbrc	r10, 3
 bce:	11 c0       	rjmp	.+34     	; 0xbf2 <__stack+0x2f3>
 bd0:	a0 fe       	sbrs	r10, 0
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <__stack+0x2e1>
 bd4:	b2 14       	cp	r11, r2
 bd6:	88 f4       	brcc	.+34     	; 0xbfa <__stack+0x2fb>
 bd8:	28 0c       	add	r2, r8
 bda:	92 2c       	mov	r9, r2
 bdc:	9b 18       	sub	r9, r11
 bde:	0e c0       	rjmp	.+28     	; 0xbfc <__stack+0x2fd>
 be0:	b2 14       	cp	r11, r2
 be2:	60 f4       	brcc	.+24     	; 0xbfc <__stack+0x2fd>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e2       	ldi	r24, 0x20	; 32
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 bee:	b3 94       	inc	r11
 bf0:	f7 cf       	rjmp	.-18     	; 0xbe0 <__stack+0x2e1>
 bf2:	b2 14       	cp	r11, r2
 bf4:	18 f4       	brcc	.+6      	; 0xbfc <__stack+0x2fd>
 bf6:	2b 18       	sub	r2, r11
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <__stack+0x2ff>
 bfa:	98 2c       	mov	r9, r8
 bfc:	21 2c       	mov	r2, r1
 bfe:	a4 fe       	sbrs	r10, 4
 c00:	10 c0       	rjmp	.+32     	; 0xc22 <__stack+0x323>
 c02:	b6 01       	movw	r22, r12
 c04:	80 e3       	ldi	r24, 0x30	; 48
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 c0c:	a2 fe       	sbrs	r10, 2
 c0e:	17 c0       	rjmp	.+46     	; 0xc3e <__stack+0x33f>
 c10:	a1 fc       	sbrc	r10, 1
 c12:	03 c0       	rjmp	.+6      	; 0xc1a <__stack+0x31b>
 c14:	88 e7       	ldi	r24, 0x78	; 120
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <__stack+0x31f>
 c1a:	88 e5       	ldi	r24, 0x58	; 88
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	b6 01       	movw	r22, r12
 c20:	0c c0       	rjmp	.+24     	; 0xc3a <__stack+0x33b>
 c22:	8a 2d       	mov	r24, r10
 c24:	86 78       	andi	r24, 0x86	; 134
 c26:	59 f0       	breq	.+22     	; 0xc3e <__stack+0x33f>
 c28:	a1 fe       	sbrs	r10, 1
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__stack+0x331>
 c2c:	8b e2       	ldi	r24, 0x2B	; 43
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <__stack+0x333>
 c30:	80 e2       	ldi	r24, 0x20	; 32
 c32:	a7 fc       	sbrc	r10, 7
 c34:	8d e2       	ldi	r24, 0x2D	; 45
 c36:	b6 01       	movw	r22, r12
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 c3e:	89 14       	cp	r8, r9
 c40:	38 f4       	brcc	.+14     	; 0xc50 <__stack+0x351>
 c42:	b6 01       	movw	r22, r12
 c44:	80 e3       	ldi	r24, 0x30	; 48
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 c4c:	9a 94       	dec	r9
 c4e:	f7 cf       	rjmp	.-18     	; 0xc3e <__stack+0x33f>
 c50:	8a 94       	dec	r8
 c52:	f3 01       	movw	r30, r6
 c54:	e8 0d       	add	r30, r8
 c56:	f1 1d       	adc	r31, r1
 c58:	80 81       	ld	r24, Z
 c5a:	b6 01       	movw	r22, r12
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 c62:	81 10       	cpse	r8, r1
 c64:	f5 cf       	rjmp	.-22     	; 0xc50 <__stack+0x351>
 c66:	22 20       	and	r2, r2
 c68:	09 f4       	brne	.+2      	; 0xc6c <__stack+0x36d>
 c6a:	42 ce       	rjmp	.-892    	; 0x8f0 <vfprintf+0x24>
 c6c:	b6 01       	movw	r22, r12
 c6e:	80 e2       	ldi	r24, 0x20	; 32
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 5d 06 	call	0xcba	; 0xcba <fputc>
 c76:	2a 94       	dec	r2
 c78:	f6 cf       	rjmp	.-20     	; 0xc66 <__stack+0x367>
 c7a:	f6 01       	movw	r30, r12
 c7c:	86 81       	ldd	r24, Z+6	; 0x06
 c7e:	97 81       	ldd	r25, Z+7	; 0x07
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <__stack+0x387>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	2b 96       	adiw	r28, 0x0b	; 11
 c88:	e2 e1       	ldi	r30, 0x12	; 18
 c8a:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__epilogue_restores__>

00000c8e <strnlen_P>:
 c8e:	fc 01       	movw	r30, r24
 c90:	05 90       	lpm	r0, Z+
 c92:	61 50       	subi	r22, 0x01	; 1
 c94:	70 40       	sbci	r23, 0x00	; 0
 c96:	01 10       	cpse	r0, r1
 c98:	d8 f7       	brcc	.-10     	; 0xc90 <strnlen_P+0x2>
 c9a:	80 95       	com	r24
 c9c:	90 95       	com	r25
 c9e:	8e 0f       	add	r24, r30
 ca0:	9f 1f       	adc	r25, r31
 ca2:	08 95       	ret

00000ca4 <strnlen>:
 ca4:	fc 01       	movw	r30, r24
 ca6:	61 50       	subi	r22, 0x01	; 1
 ca8:	70 40       	sbci	r23, 0x00	; 0
 caa:	01 90       	ld	r0, Z+
 cac:	01 10       	cpse	r0, r1
 cae:	d8 f7       	brcc	.-10     	; 0xca6 <strnlen+0x2>
 cb0:	80 95       	com	r24
 cb2:	90 95       	com	r25
 cb4:	8e 0f       	add	r24, r30
 cb6:	9f 1f       	adc	r25, r31
 cb8:	08 95       	ret

00000cba <fputc>:
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	fb 01       	movw	r30, r22
 cc4:	23 81       	ldd	r18, Z+3	; 0x03
 cc6:	21 fd       	sbrc	r18, 1
 cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <fputc+0x16>
 cca:	8f ef       	ldi	r24, 0xFF	; 255
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	2c c0       	rjmp	.+88     	; 0xd28 <fputc+0x6e>
 cd0:	22 ff       	sbrs	r18, 2
 cd2:	16 c0       	rjmp	.+44     	; 0xd00 <fputc+0x46>
 cd4:	46 81       	ldd	r20, Z+6	; 0x06
 cd6:	57 81       	ldd	r21, Z+7	; 0x07
 cd8:	24 81       	ldd	r18, Z+4	; 0x04
 cda:	35 81       	ldd	r19, Z+5	; 0x05
 cdc:	42 17       	cp	r20, r18
 cde:	53 07       	cpc	r21, r19
 ce0:	44 f4       	brge	.+16     	; 0xcf2 <fputc+0x38>
 ce2:	a0 81       	ld	r26, Z
 ce4:	b1 81       	ldd	r27, Z+1	; 0x01
 ce6:	9d 01       	movw	r18, r26
 ce8:	2f 5f       	subi	r18, 0xFF	; 255
 cea:	3f 4f       	sbci	r19, 0xFF	; 255
 cec:	31 83       	std	Z+1, r19	; 0x01
 cee:	20 83       	st	Z, r18
 cf0:	8c 93       	st	X, r24
 cf2:	26 81       	ldd	r18, Z+6	; 0x06
 cf4:	37 81       	ldd	r19, Z+7	; 0x07
 cf6:	2f 5f       	subi	r18, 0xFF	; 255
 cf8:	3f 4f       	sbci	r19, 0xFF	; 255
 cfa:	37 83       	std	Z+7, r19	; 0x07
 cfc:	26 83       	std	Z+6, r18	; 0x06
 cfe:	14 c0       	rjmp	.+40     	; 0xd28 <fputc+0x6e>
 d00:	8b 01       	movw	r16, r22
 d02:	ec 01       	movw	r28, r24
 d04:	fb 01       	movw	r30, r22
 d06:	00 84       	ldd	r0, Z+8	; 0x08
 d08:	f1 85       	ldd	r31, Z+9	; 0x09
 d0a:	e0 2d       	mov	r30, r0
 d0c:	09 95       	icall
 d0e:	89 2b       	or	r24, r25
 d10:	e1 f6       	brne	.-72     	; 0xcca <fputc+0x10>
 d12:	d8 01       	movw	r26, r16
 d14:	16 96       	adiw	r26, 0x06	; 6
 d16:	8d 91       	ld	r24, X+
 d18:	9c 91       	ld	r25, X
 d1a:	17 97       	sbiw	r26, 0x07	; 7
 d1c:	01 96       	adiw	r24, 0x01	; 1
 d1e:	17 96       	adiw	r26, 0x07	; 7
 d20:	9c 93       	st	X, r25
 d22:	8e 93       	st	-X, r24
 d24:	16 97       	sbiw	r26, 0x06	; 6
 d26:	ce 01       	movw	r24, r28
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
 d2c:	1f 91       	pop	r17
 d2e:	0f 91       	pop	r16
 d30:	08 95       	ret

00000d32 <__ultoa_invert>:
 d32:	fa 01       	movw	r30, r20
 d34:	aa 27       	eor	r26, r26
 d36:	28 30       	cpi	r18, 0x08	; 8
 d38:	51 f1       	breq	.+84     	; 0xd8e <__ultoa_invert+0x5c>
 d3a:	20 31       	cpi	r18, 0x10	; 16
 d3c:	81 f1       	breq	.+96     	; 0xd9e <__ultoa_invert+0x6c>
 d3e:	e8 94       	clt
 d40:	6f 93       	push	r22
 d42:	6e 7f       	andi	r22, 0xFE	; 254
 d44:	6e 5f       	subi	r22, 0xFE	; 254
 d46:	7f 4f       	sbci	r23, 0xFF	; 255
 d48:	8f 4f       	sbci	r24, 0xFF	; 255
 d4a:	9f 4f       	sbci	r25, 0xFF	; 255
 d4c:	af 4f       	sbci	r26, 0xFF	; 255
 d4e:	b1 e0       	ldi	r27, 0x01	; 1
 d50:	3e d0       	rcall	.+124    	; 0xdce <__ultoa_invert+0x9c>
 d52:	b4 e0       	ldi	r27, 0x04	; 4
 d54:	3c d0       	rcall	.+120    	; 0xdce <__ultoa_invert+0x9c>
 d56:	67 0f       	add	r22, r23
 d58:	78 1f       	adc	r23, r24
 d5a:	89 1f       	adc	r24, r25
 d5c:	9a 1f       	adc	r25, r26
 d5e:	a1 1d       	adc	r26, r1
 d60:	68 0f       	add	r22, r24
 d62:	79 1f       	adc	r23, r25
 d64:	8a 1f       	adc	r24, r26
 d66:	91 1d       	adc	r25, r1
 d68:	a1 1d       	adc	r26, r1
 d6a:	6a 0f       	add	r22, r26
 d6c:	71 1d       	adc	r23, r1
 d6e:	81 1d       	adc	r24, r1
 d70:	91 1d       	adc	r25, r1
 d72:	a1 1d       	adc	r26, r1
 d74:	20 d0       	rcall	.+64     	; 0xdb6 <__ultoa_invert+0x84>
 d76:	09 f4       	brne	.+2      	; 0xd7a <__ultoa_invert+0x48>
 d78:	68 94       	set
 d7a:	3f 91       	pop	r19
 d7c:	2a e0       	ldi	r18, 0x0A	; 10
 d7e:	26 9f       	mul	r18, r22
 d80:	11 24       	eor	r1, r1
 d82:	30 19       	sub	r19, r0
 d84:	30 5d       	subi	r19, 0xD0	; 208
 d86:	31 93       	st	Z+, r19
 d88:	de f6       	brtc	.-74     	; 0xd40 <__ultoa_invert+0xe>
 d8a:	cf 01       	movw	r24, r30
 d8c:	08 95       	ret
 d8e:	46 2f       	mov	r20, r22
 d90:	47 70       	andi	r20, 0x07	; 7
 d92:	40 5d       	subi	r20, 0xD0	; 208
 d94:	41 93       	st	Z+, r20
 d96:	b3 e0       	ldi	r27, 0x03	; 3
 d98:	0f d0       	rcall	.+30     	; 0xdb8 <__ultoa_invert+0x86>
 d9a:	c9 f7       	brne	.-14     	; 0xd8e <__ultoa_invert+0x5c>
 d9c:	f6 cf       	rjmp	.-20     	; 0xd8a <__ultoa_invert+0x58>
 d9e:	46 2f       	mov	r20, r22
 da0:	4f 70       	andi	r20, 0x0F	; 15
 da2:	40 5d       	subi	r20, 0xD0	; 208
 da4:	4a 33       	cpi	r20, 0x3A	; 58
 da6:	18 f0       	brcs	.+6      	; 0xdae <__ultoa_invert+0x7c>
 da8:	49 5d       	subi	r20, 0xD9	; 217
 daa:	31 fd       	sbrc	r19, 1
 dac:	40 52       	subi	r20, 0x20	; 32
 dae:	41 93       	st	Z+, r20
 db0:	02 d0       	rcall	.+4      	; 0xdb6 <__ultoa_invert+0x84>
 db2:	a9 f7       	brne	.-22     	; 0xd9e <__ultoa_invert+0x6c>
 db4:	ea cf       	rjmp	.-44     	; 0xd8a <__ultoa_invert+0x58>
 db6:	b4 e0       	ldi	r27, 0x04	; 4
 db8:	a6 95       	lsr	r26
 dba:	97 95       	ror	r25
 dbc:	87 95       	ror	r24
 dbe:	77 95       	ror	r23
 dc0:	67 95       	ror	r22
 dc2:	ba 95       	dec	r27
 dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__ultoa_invert+0x86>
 dc6:	00 97       	sbiw	r24, 0x00	; 0
 dc8:	61 05       	cpc	r22, r1
 dca:	71 05       	cpc	r23, r1
 dcc:	08 95       	ret
 dce:	9b 01       	movw	r18, r22
 dd0:	ac 01       	movw	r20, r24
 dd2:	0a 2e       	mov	r0, r26
 dd4:	06 94       	lsr	r0
 dd6:	57 95       	ror	r21
 dd8:	47 95       	ror	r20
 dda:	37 95       	ror	r19
 ddc:	27 95       	ror	r18
 dde:	ba 95       	dec	r27
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <__ultoa_invert+0xa2>
 de2:	62 0f       	add	r22, r18
 de4:	73 1f       	adc	r23, r19
 de6:	84 1f       	adc	r24, r20
 de8:	95 1f       	adc	r25, r21
 dea:	a0 1d       	adc	r26, r0
 dec:	08 95       	ret

00000dee <__prologue_saves__>:
 dee:	2f 92       	push	r2
 df0:	3f 92       	push	r3
 df2:	4f 92       	push	r4
 df4:	5f 92       	push	r5
 df6:	6f 92       	push	r6
 df8:	7f 92       	push	r7
 dfa:	8f 92       	push	r8
 dfc:	9f 92       	push	r9
 dfe:	af 92       	push	r10
 e00:	bf 92       	push	r11
 e02:	cf 92       	push	r12
 e04:	df 92       	push	r13
 e06:	ef 92       	push	r14
 e08:	ff 92       	push	r15
 e0a:	0f 93       	push	r16
 e0c:	1f 93       	push	r17
 e0e:	cf 93       	push	r28
 e10:	df 93       	push	r29
 e12:	cd b7       	in	r28, 0x3d	; 61
 e14:	de b7       	in	r29, 0x3e	; 62
 e16:	ca 1b       	sub	r28, r26
 e18:	db 0b       	sbc	r29, r27
 e1a:	0f b6       	in	r0, 0x3f	; 63
 e1c:	f8 94       	cli
 e1e:	de bf       	out	0x3e, r29	; 62
 e20:	0f be       	out	0x3f, r0	; 63
 e22:	cd bf       	out	0x3d, r28	; 61
 e24:	09 94       	ijmp

00000e26 <__epilogue_restores__>:
 e26:	2a 88       	ldd	r2, Y+18	; 0x12
 e28:	39 88       	ldd	r3, Y+17	; 0x11
 e2a:	48 88       	ldd	r4, Y+16	; 0x10
 e2c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e2e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e30:	7d 84       	ldd	r7, Y+13	; 0x0d
 e32:	8c 84       	ldd	r8, Y+12	; 0x0c
 e34:	9b 84       	ldd	r9, Y+11	; 0x0b
 e36:	aa 84       	ldd	r10, Y+10	; 0x0a
 e38:	b9 84       	ldd	r11, Y+9	; 0x09
 e3a:	c8 84       	ldd	r12, Y+8	; 0x08
 e3c:	df 80       	ldd	r13, Y+7	; 0x07
 e3e:	ee 80       	ldd	r14, Y+6	; 0x06
 e40:	fd 80       	ldd	r15, Y+5	; 0x05
 e42:	0c 81       	ldd	r16, Y+4	; 0x04
 e44:	1b 81       	ldd	r17, Y+3	; 0x03
 e46:	aa 81       	ldd	r26, Y+2	; 0x02
 e48:	b9 81       	ldd	r27, Y+1	; 0x01
 e4a:	ce 0f       	add	r28, r30
 e4c:	d1 1d       	adc	r29, r1
 e4e:	0f b6       	in	r0, 0x3f	; 63
 e50:	f8 94       	cli
 e52:	de bf       	out	0x3e, r29	; 62
 e54:	0f be       	out	0x3f, r0	; 63
 e56:	cd bf       	out	0x3d, r28	; 61
 e58:	ed 01       	movw	r28, r26
 e5a:	08 95       	ret

00000e5c <_exit>:
 e5c:	f8 94       	cli

00000e5e <__stop_program>:
 e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__stop_program>
